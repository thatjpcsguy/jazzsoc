%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: USU LOGO_ENDORSEMENT_PMS_BLACK.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: union
%%CreationDate: 11/8/10
%%BoundingBox: 0 0 371 105
%%HiResBoundingBox: 0 0 370.3956 104.3648
%%CropBox: 0 0 370.3956 104.3648
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 36 8%%BeginData: 8864 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FFAF84535328280005F800F800F800F8000005052E2E5959AF%FD63FFA87E2E280000F8F8F800F8F8F800F8F8F800F8F8F800F8F8F800F8%F8F805052F59FD1FFFA8FD3FFF05F800F800F800F800F828537E53530500%F800005359590500F800F800F800F80005FD0BFF842805050053FFFF2EFD%040584FFFFFF2FF800007EFFFF057EFFFFA8287E7E2EFF7E060005057EFF%FFA8280005050506FF7E060005057EFD06FF2805000528FFFF5328FFFFFF%2E2FFD07FFF8F8F800F8F8F800F8532805FFFF005328F8282E282F2E00F8%F8F800F8F8F800F805A8FD0AFF53F8060505F82EFF00F82805F8F8A8FF28%F8062800F884FFF805FFFF53F8840500FF2EF8060500F859FF53F8050528%052EFF2EF8060500F859FD04FF7D000028000005FF28F859FF7E0006FD07%FF00F800F800F800F806FF2F05A87E282FFF2F53F800F80605060505F800%F800F80000FD0BFF2E00FFFFFF2EF8FF0053FFFF840053FFF82EFFFFA805%05FF2805FFFF0505FF2E00FF2E05FFFFFF0500FF5300A9FD05FF2805FFFF%FF0500FD04FFA8F884FFFF2800FFFF0006FF2EF8FD08FFF8F8F800F8F800%0000FF2E0605280559FF05282F282E282E062E2E53F8F8F800F805A9FD0A%FF53F8FFFFFF0500A80028FFFF7EF85959F87DFFFFFF0600FF7EF87EFFF8%28FF0500FF2EF8FFFFFF2EF8FF59F82E2E537EFFFF2EF8FFFFFF2EF8A8FF%FFFF7D0006532E0505FFFF59F82EF82FFD08FF00F800F80559FF050053FF%05050528A9530528282805060505002EFF05F800F80000FD0BFF53000006%00002EFF00000006F805FF59F8A8FFFFFF2FF8FFFF00287EF884FF2E00FF%2805FFFFFF7EF8A95300F800F82EFFFF2805FFFFFF7EF884FFFFFFA8F800%F800F828FFFFFF06F805FD09FFF800F8F8F8A8FF7D000506050005000606%FD05FF7DA8FFFFFF28F800F8F8F805AFFD0AFF53F80605062EFFFF050006%F800A8FF2E007EFFFFFF28F8A8FF06000005FFFF0500FF2EF8FFFFFF5300%A853F8597E7EA8FFFF2EF8FFFFFF2F007EFFFFFF7EF82EA87E2FF859FFFF%53002EFD09FF00F800F8050505A8FFA8590605055353FD04FF84050505FF%FFFF28280000F80005FD0BFF2F00FD06FF002FFF2FF87EFF84F859FFFFFF%0600FFFF7EF8002EFFFF2E00FF2805FFFFFF2EF8FF5300A8FD05FF2805FF%FFFF2EF8FD04FF84F884FFFFFF0028FFFFA8F87EFD09FFF800F8F8F800F8%052E597D2806FFFF2E287E5328F87EFF28285953FF7E00F8F8F805FD0BFF%53F8AFFD04FFA80028FFFF05F8A9FF05F859842EF853FFFFFF00F87EFFFF%0500FF2EF859592EF82EFF53F85359595384FF2EF859592EF82EFD04FF7E%F8287E5928F87EFFFF7D0053FD09FF00F800F800F800F82800287DFFA828%F800F806F828FFA80600F806FF59F800F80000FD0BFF5305FD06FF0053FF%FF7E002EFF7E05F800F82EFD04FF2805FFFFFF2E05FF5300F800F828FFFF%5900F800F80000FF5300F800F828FD05FFA90000F800F82FFFFFFFA80084%FD09FFF8F8F800F8F8F800A8FFA8845306F800F805A8A8A859F800007EFF%7EF8F8F800F805A8FD0BFFA8FD06FFAFA8FFFFFF84FFFFFFA8592E7EFD06%FFA8FFA9FD05FF7E7E7DA8FFFFA8FF84847D847DA8FFFF7E7E7DA8FFFFA9%FD04FFA87D7E7DA8FFFFA9FFFFAFFD0AFF00F800F800F8000053A82FF800%F800F800057E7E05F800F8007DA82800F800F80000FD5EFFF8F8F800F8F8%F800F8050000F8F8F800F8F8F800F8F8F800F800F800F8F8F800F805A9FD%0AFFA853FFFFFF7E7EFF5953FFFFFF5984FF7E7DFF2EA9FFFFA82FA8A828%2E282E287EFF7E282E0653A8FFFFFF28050053FFFF5984A82E282F282859%7E53FFFFFF5359FD05FF53050528FFFFFF2E2E282E065300F800F800F800%F800F800F800057E597E597E5305F800F800F800F800F800F80000FD0BFF%2E00A8FFFF2EF8FF0500A8FFFF0505FF050684002FFFFF53F8FF28000005%F8002FFF05000000F805A9FF05000505F828FF0505A80000F800F82F0600%A9FFA80028FD04FF2EF805050005FF7D00F805000005F800F8F8F800F8F8%F800F8F8F806FD06FF0000F8F8F800F8F8F800F8F8F805FD0BFF2EF8AFFF%FF2800FF06F806FFFF0006FF0500FFF805FFFF0005FF0600FFFFFFA8FFFF%0505FFFF7EF853FFF828FFFF5328FF0006FFFFA8F82EFFFF84F82EFF28F8%A8FFFFFF7EF82EFFFF2EF8537EF884FD04FF05F800F800F800F800F800F8%0005FF532E2859FF06F800F800F800F800F800F80006FD0BFF2E00A8FFFF%2E00FF0500F859FF0505FF0506FF53F8FFA8002EFF0506FD06FF002EFFFF%FF002EFFF80584FD04FF0505FFFFFFF859FFFFFF2EF87DF82FFD04FF2E00%A9FFFFFFF82E7E007EFFAFFFFF0500F8F8F800F8F8F800F8F8F806FF06F8%0005FF0000F8F8F800F8F8F800F8F8F82EFD0BFF2EF8AFFFFF2800FF0505%05F8AF0506FF0500FF7E005359F884FF28F800F8F859FFFF05F82E2E05F8%7EFF59F800F82EFFFF0006FFFFA8F82EFFFFFF8400F800A8FD04FF28F8FD%04FF05057EF8F8F80028FF2EF800F800F800F800F800F80005840500F806%7E05F800F800F800F800F800F80053FD0BFF2800A9FFFF2F00FF002EA800%050606FF0006FFFF00280505FFFF06052E5353AFFFFF0500F800F859FD04%FF5306F828FF0606FFFFFFF853FD04FF28002EFD05FF0605FD04FF050659%002E532E84FF53F8F800F8F8F800F8F8F800F806FF2EF80028FF00F8F800%F800F800F8F8F800F8A8FD0BFF2EF8FFFFFF0600FF0505FF2EF8F828FF05%00FFFF2EF80028FFFF0600FD06FF0505FF05007EFD06FF2EF8A80028FFFF%A8002EFD04FF59F884FD05FF2EF8FD04FF00067EF8A8FD05FFF8057EA87E%A9A87E84A97E8484FFA8847EFFA9A87EA884A859AF84A8A87DF805FD0CFF%59002EFFA80505FF0028FFFF050028FF0506FFFF7E00F8A8FFFF0605AFFF%A9FFFFFF0528FFFF0005FFA80584FFFF2800A80606FFFFFFF853FD04FF59%007EFD05FF7E0028FFFF53F87E7D007EFD05FF28F859FFFFA87E28597DFF%59050005597D00050059FFA8532859A9FFFF28002EFD0DFF050000F8F884%FF0505FFFFA8F828FF0500FFFFFF0005FFFFFF2EF8F8F800F82FFF0505FF%FF7EF82FA800F800F80006FF0028FFFFA8002EFD04FF7DF8A8FD06FF2800%F800F828FF7DF8A8FD05FF590005FFFFA80000F859FF5300060028FD0405%2FFF5300F8057EFFFF05F8A9FD0EFF2E2828A8FFFF7EA8FFFFFF7E59FF84%84FFFFFF847EFFFFFF84532F532E5384FF7EA9FFFFFF597EFFA853052853%FFFF847EFFFFFF7DFD06FF7EFD08FF532E0553FFFFAF7EFD07FF00F859FF%2EF8F80005FF2EFD0405060006F853FF28F800F82FFF53F828FD40FFA8FD%07FFA8FD07FFA9FD07FFA8FFFFFFA9FD05FF59F806FFAF0000007EFF53F8%050028050500002FFF5905F805A8FF00007EFD0EFFA92E5359FFFFA8A8FF%FFFF7EA9FF84597E59FD04FF84FD04FFA8FFFFA9597E597E7DFF7EA9FFFF%FFA8A8FD04FFA9FD04FFA8FFFF84FD04FFA8FFFFA9FD04FF532F53FFFFFF%A984FD04FFA8FFFFFF05F859FFFF53AFFFFF7E2E0628282E052806A8FFFF%A859FFFF280006FD0EFF84F8F8F80005FF0005FFFF84002EA8F800F8F8F8%A8FF84F853FFFF7E007DFF0000F8F8F8007E06F8FFFFAFF82EFFFFFFA8F8%59FFFF84007DA9F82EFFFF840059FFF859FFAF00F8F80000A9FF59F87DFF%FF5300FFFFFF7D00F8532E2F2E532E2F53FD06FF59282F2E2F28532800F8%AFFD0EFF050084FF2F058459F87EFF28F8AF59002E7E530000FF8400F8A8%FF84F87EFF002884597E59FF59002FFF2E007DFFFFFF7E002FFFFF84F87E%A800F884FF84F87EFF002FFF050053FF530006FF2F0000FFFF53F8FD04FF%28F8F800F8F8F800F805FFA853537EFFF8F8F800F8F8F800F853FD0FFF28%F8A8FD05FF0000A8F82EFF59F8A8FFFF2FF87EA8F8F800FF7EF853FFF853%FD06FF0000840005FD04FF84F853FFFF7D0059A8F80000FF7E0059FFF853%FFF806FFFFFF0600FF53F80006FF2E00FD05FF0500F800F800F80005FF28%00F82EFF05F800F800F800F82EFD10FF7E05F80653FFFFFF53000005A8FF%59007EFFFFA9F87EA80505002FAFF87EFF050006002EFFFFFF7EF805F8A8%FD04FF7E0053FFFFA8F87EA80528002EFFF87EFF0053A9F87EFFFFFF7EF8%AF530528007E7EF8FD05FFA8F800F8F8F800F8067D05F8F8007E00F8F800%F8F8F805FD12FF842E00F800FFFFFF00002EFFFF59F884FFFFA8F82EA9F8%7E0500530053FFF805050628FD04FF06F82EFD05FF84F853FFFF7D0059A8%F87E28F82E0059FFF85984F853FFFFFF53008453F8FF00052E00FD06FFA8%F800F800F80005FF0600F82EFF05F800F800F805A8FD15FF53002EFFFF53%F8FFFFFF53007EFFFF84F87E84007DFFF805F87EFF0053FD07FF59007EFD%05FF7E0053FFFFA8F87EA80059FF0000F87EFF0053FFF853FFFFFF53F8FF%5300FF84F805F8FD07FF84F800F8F8F806FF7E282F7EFF0000F8F8F805A8%FFA9FD10FF5359FFFFFFF82EFFFF2EF8A8FFFF59F884FFFF0500AF84F859%FF53F80059FFF853FD07FF59F884FD06FFF828FFFF28F87DA8F859FF59F8%F859FFF853FF0500FFFFFF0000FF53F8A9FF2EF8F8FD09FF0500F80000A8%FD04FF5905F800F82EFD14FF0500052F00007EFFFF53F8FFFFFF59000006%00002EFF7E0059FFFF2EF87EFF000006050605A8FFFF59007EFD06FF2FF8%28280005FF7E0059FFFF2EF87EFF002EFF5900002F000053FF2F00A8FFFF%05F8FD0AFF28F8F800F805282E00F8F800F853FD15FFAF2800F80559FFFF%FF7E2FFFFFFFAF050500062FFFFFFF28A9FFFF842884FF28050005000684%FFFFA92EFD08FF2EF80006FFFFFF2EA8FFFFA8287EFF2E84FFFF5305F805%53FFFF842EFFFFFF7D28FD0BFF8428F800F800F800F80028AFFD76FF8428%05F8F80053A8FD6AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE Black 6 C)
%%CMYKCustomColor: 1 0.3501 0 1 (PANTONE Black 6 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">USU015F01_USU Logo_Endorsement_PMS_Black_v1</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-11-08T10:16:56+11:00</xap:CreateDate>
         <xap:ModifyDate>2010-11-08T10:16:56+11:00</xap:ModifyDate>
         <xap:MetadataDate>2010-11-08T10:16:56+11:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>72</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgASAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AI/MP/Oa3nW6aRNB0Sx0y&#xA;FhRHuWkvJl9wwMEf3ocyBjDDd57rP/ORv50asvCfzNPbxitFskhtCOX+XAiOfarZIRA6Lw96Dh/x&#xA;15isINd80+Zr620G4nNnDqV9Pc3bSSqKusMAZpHWMNWRgOKjbdqKZxHc1zMRzCded/yC1byxcaVZ&#xA;3uvWl3q2u8P0TbIk6Ry8iq0e4nWOOMlnVV5ePxcRvgHqteLh2r5MEtPJHmi5v72wFl9Wn02U2+ov&#xA;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&#xA;Mbf/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:A1145F55B3ECDF1182D6D225B009F5B0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:A2145F55B3ECDF1182D6D225B009F5B0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b0b2213f-3f18-ec4d-9457-e0e76f5da4d9</stRef:instanceID>
            <stRef:documentID>xmp.did:3925176B21206811A961D5F68C2E7CD0</stRef:documentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.000089</stDim:w>
            <stDim:h>210.001566</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE Black 6 C</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE Black 6 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>35.000603</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -104.365 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 104.365 li
370.396 104.365 li
370.396 0 li
cp
clp
[1 0 0 1 0 0 ]ct
69.8916 69.0459 mo
67.9746 73.0811 li
71.9526 71.1421 li
73.4517 75.3477 li
74.8896 71.166 li
78.9287 73.0811 li
76.9834 69.1089 li
81.1943 67.6069 li
77.0117 66.167 li
78.9287 62.1289 li
74.9517 64.0669 li
73.4517 59.8628 li
72.0146 64.0449 li
67.9746 62.1289 li
69.9126 66.1069 li
65.7075 67.6069 li
69.8916 69.0459 li
cp
false sop
/0 
<<
/Name (PANTONE Black 6 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 0.350006 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
28.5791 66.167 mo
30.4912 62.1289 li
26.5161 64.0679 li
25.0181 59.8628 li
23.5752 64.0439 li
19.543 62.1289 li
21.481 66.106 li
17.2749 67.606 li
21.4531 69.0439 li
19.543 73.0811 li
23.5142 71.1421 li
25.0181 75.3481 li
26.4561 71.166 li
30.4912 73.0811 li
28.5513 69.1069 li
32.7642 67.606 li
28.5791 66.167 li
cp
f
52.7734 84.0898 mo
54.6855 80.0557 li
50.7144 81.9927 li
49.2114 77.7881 li
47.7686 81.9678 li
43.7354 80.0557 li
45.6753 84.0269 li
41.4653 85.5278 li
45.6543 86.9697 li
43.7354 91.0049 li
47.7104 89.064 li
49.2114 93.2759 li
50.6494 89.0908 li
54.6855 91.0049 li
52.7446 87.0298 li
56.9546 85.5278 li
52.7734 84.0898 li
cp
f
45.6504 54.2158 mo
43.7383 58.2549 li
47.7104 56.3188 li
49.2124 60.5239 li
50.6533 56.3438 li
54.6875 58.2549 li
52.7485 54.2788 li
56.9546 52.7808 li
52.7686 51.3428 li
54.6875 47.3086 li
50.7104 49.2446 li
49.2124 45.0391 li
47.7734 49.2197 li
43.7383 47.3086 li
45.6792 51.2808 li
41.4653 52.7808 li
45.6504 54.2158 li
cp
f
48.2061 74.9287 mo
48.2061 64.585 li
48.2061 64.585 48.207 61.4048 44.5742 61.4048 cv
36.7651 61.4048 li
36.7651 73.792 li
45.3252 73.792 li
47.626 73.792 48.2061 74.9287 48.2061 74.9287 cv
38.625 64.0308 mo
46.3472 64.0308 li
46.3472 65.2007 li
38.625 65.2007 li
38.625 64.0308 li
cp
38.625 67.2266 mo
46.3472 67.2266 li
46.3472 68.3965 li
38.625 68.3965 li
38.625 67.2266 li
cp
38.625 70.4209 mo
46.3472 70.4209 li
46.3472 71.5928 li
38.625 71.5928 li
38.625 70.4209 li
cp
f
50.2148 64.585 mo
50.2148 74.9287 li
50.2148 74.9287 50.7949 73.792 53.0957 73.792 cv
61.6558 73.792 li
61.6558 61.4038 li
53.8467 61.4038 li
50.2139 61.4038 50.2148 64.585 50.2148 64.585 cv
59.7959 71.5928 mo
52.0737 71.5928 li
52.0737 70.4229 li
59.7959 70.4229 li
59.7959 71.5928 li
cp
59.7959 68.397 mo
52.0737 68.397 li
52.0737 67.2261 li
59.7959 67.2261 li
59.7959 68.397 li
cp
59.7959 65.2002 mo
52.0737 65.2002 li
52.0737 64.0298 li
59.7959 64.0298 li
59.7959 65.2002 li
cp
f
48.9199 0 mo
24.4097 0 0 6.52588 0 6.52588 cv
0 39.1392 li
0 68.5308 21.063 99.0781 48.9199 104.365 cv
76.77 99.0781 97.8398 68.5308 97.8398 39.1392 cv
97.8398 14.8882 li
97.8398 6.52588 li
97.8398 6.52588 77.394 0 48.9199 0 cv
50.4717 12.7109 mo
50.5801 12.2788 50.7881 11.8242 51.0898 11.3418 cv
52.9189 8.51172 57.1621 8.29492 58.4736 8.2959 cv
58.7251 8.2959 58.8848 8.18896 58.917 8.00488 cv
59.0508 7.34912 59.5439 5.84375 61.3169 5.74316 cv
61.8198 5.71387 62.3291 5.5249 62.6479 5.37891 cv
62.856 5.2832 62.9897 5.33887 62.9478 5.5249 cv
62.8989 5.75098 62.7881 6.05713 62.5298 6.28418 cv
61.2827 7.35303 61.4678 7.84473 61.6157 7.98389 cv
61.6997 8.05615 61.811 8.01611 61.9121 7.93018 cv
65.6831 4.64307 67.8828 6.8208 68.5498 7.53223 cv
68.6621 7.65576 68.6938 7.85889 68.4751 7.9082 cv
65.9067 8.48193 64.9219 10.769 59.686 10.3999 cv
59.0508 10.3599 54.769 10.146 53.4067 12.0859 cv
52.6201 13.2168 53.1631 14.2651 55.481 14.7759 cv
57.2358 15.1602 61.333 14.563 63.2681 14.4038 cv
65.1558 14.252 73.3999 13.2241 77.7251 14.4658 cv
79.5469 14.9868 82.1987 16.4512 81.6729 19.2148 cv
81.3301 20.9639 79.6489 21.644 79.6489 21.644 cv
79.6489 21.644 74.9077 24.9849 83.4121 25.022 cv
86.0547 25.0332 83.4551 27.2021 83.3208 27.8447 cv
83.2261 28.3018 83.6538 28.7158 84.0649 28.9629 cv
84.3818 29.126 84.3906 29.3291 84.1558 29.5352 cv
83.9141 29.7441 83.5469 29.939 82.6567 29.958 cv
82.27 29.9668 82.2739 30.209 82.3091 30.3779 cv
82.3677 30.7822 82.8188 31.0938 83.4458 31.167 cv
83.7881 31.2568 83.8467 31.4839 83.5469 31.8027 cv
83.019 32.3501 82.3159 32.3501 81.1279 32.3071 cv
80.0098 32.2661 79.1118 33.6289 79.7739 34.1929 cv
80.2168 34.5742 81.1211 35.4209 80.3438 37.71 cv
80.0977 38.4028 79.6748 37.0762 79.3149 37.2832 cv
78.3857 37.834 77.5737 37.1392 77.1558 36.6392 cv
76.9727 36.4258 76.8149 36.4229 76.689 36.6392 cv
76.3179 37.2881 75.3408 38.4312 73.3667 37.3618 cv
72.9409 37.1382 72.0557 37.9199 72.0029 37.6548 cv
71.688 36.1182 72.4736 35.21 73.1421 34.7329 cv
73.209 34.6851 73.4697 34.3311 73.0337 34.3447 cv
72.3628 34.3071 71.5518 34.0947 71.4619 33.2778 cv
71.4429 33.105 70.6089 33.1489 70.6499 32.9121 cv
70.8511 31.7852 73.3311 30.9697 75.041 32.104 cv
76.4868 33.0571 78.3027 29.7979 76.998 28.269 cv
76.0537 27.168 70.5317 30.2451 68.6509 26.2539 cv
67.8979 24.644 68.8438 23.269 68.0737 23.1592 cv
67.3037 23.0498 63.835 22.3027 59.979 25.396 cv
53.4648 30.6309 46.4038 27.7798 44.7417 26.6118 cv
44.4829 26.5298 44.2319 26.7378 44.3389 26.999 cv
44.6079 27.6748 44.4917 28.3018 44.168 28.7842 cv
43.4868 29.8091 41.1489 30.853 40.7339 30.9761 cv
37.9917 31.7808 38.2808 33.876 38.5698 34.813 cv
38.6528 35.0972 38.5488 35.2642 38.251 35.21 cv
37.415 35.0562 35.7188 34.542 35.0581 32.896 cv
34.981 32.7061 34.7891 32.7021 34.5649 32.8599 cv
33.542 33.5889 33.9019 34.6421 34.147 35.1147 cv
34.2378 35.2949 34.188 35.4751 33.9429 35.5039 cv
33.0098 35.6162 32.3398 34.5249 31.5371 34.604 cv
31.0088 34.6528 30.3921 35.0571 30.0591 35.29 cv
29.896 35.394 29.873 35.6582 29.9707 35.959 cv
30.9927 38.9951 29.314 39.1011 29.2109 39.041 cv
29.0947 38.9771 29.1606 38.4731 28.668 38.397 cv
27.022 38.4829 26.5508 37.4102 26.459 36.6138 cv
26.4258 36.355 26.3257 36.269 26.1499 36.3901 cv
25.5229 36.8228 23.9829 37.6821 23.019 36.4189 cv
22.8818 36.2388 22.4209 36.4258 22.1689 36.5361 cv
21.9688 36.6201 21.9609 36.2891 21.9688 36.189 cv
22.0869 34.458 23.2568 33.6802 23.9019 33.3789 cv
24.1431 33.2661 24.1689 33.1411 23.9761 32.999 cv
23.4561 32.6128 22.5391 31.7769 22.832 30.8701 cv
22.8818 30.6929 22.061 30.3711 22.2637 30.2212 cv
24.1587 28.8511 26.5947 31.1289 26.9038 31.375 cv
27.229 31.6357 28.9517 31.6899 33.3511 29.2188 cv
36.146 27.6489 37.6089 26.354 38.4038 25.3682 cv
38.502 25.25 38.7031 25.0391 38.9868 25.0332 cv
40.7607 24.9751 42.5127 24.7119 43.8799 23.5059 cv
44.106 23.272 44.3389 23.4092 44.4316 23.4771 cv
46.9497 25.2241 48.2461 21.356 48.7656 19.5879 cv
48.8311 19.229 48.9058 18.9321 49.2891 18.9131 cv
58.5488 19.3569 76.104 19.2939 76.104 19.2939 cv
76.104 19.2939 78.4097 19.479 78.293 18.041 cv
78.1099 15.7358 68.5347 15.7871 61.3921 16.7729 cv
58.7959 17.1279 55.0269 17.3359 52.8027 16.4722 cv
51.874 16.1118 51.1299 15.5449 50.7119 14.8071 cv
50.271 13.8672 50.3867 13.3071 50.4717 12.7109 cv
68.4507 10.5142 mo
68.1919 10.5601 67.8208 10.6689 67.4219 10.937 cv
66.6509 11.4521 63.5747 12.73 62.6138 11.1929 cv
62.6138 11.1929 64.772 11.1172 66.1748 9.87402 cv
66.1748 9.87402 67.6816 9.35986 68.5669 10.1611 cv
68.6689 10.251 68.687 10.4741 68.4507 10.5142 cv
63.9419 33.188 mo
64.145 33.4751 64.0698 33.6592 63.7598 33.7319 cv
63.4478 33.813 63.041 33.8198 62.2368 33.4331 cv
61.8857 33.2661 61.7856 33.4839 61.7358 33.646 cv
61.606 34.0361 61.8608 34.52 62.3867 34.8672 cv
62.6548 35.104 62.605 35.335 62.187 35.4819 cv
61.4761 35.728 60.8418 35.4048 59.8037 34.8281 cv
59.1978 34.4912 58.7251 34.4331 58.314 34.9209 cv
58.0811 35.188 58.106 35.4399 58.2368 35.5762 cv
58.6406 35.9761 58.8848 36.7788 57.8799 38.04 cv
57.5469 38.459 57.186 37.3008 56.8838 37.4438 cv
55.5049 38.082 54.377 37.2422 53.9497 36.665 cv
53.8579 36.5469 53.6641 36.5117 53.4307 36.6621 cv
52.7368 37.1221 51.2646 37.8828 50.6958 36.5571 cv
50.6118 36.3647 49.8008 36.8569 49.8091 36.478 cv
49.8438 34.2822 51.749 33.8721 52.562 33.8027 cv
52.812 33.7749 52.8608 33.6548 52.728 33.4541 cv
52.4038 32.978 52.0137 32.4121 52.229 31.7529 cv
52.376 31.2671 51.1299 31.1538 51.6421 30.9019 cv
54.1577 29.6499 55.5649 32.0498 56.002 32.3071 cv
56.7271 32.7261 60.0127 31.6602 60.4131 29.8828 cv
60.5 29.5352 59.646 29.377 58.8018 29.168 cv
58.6489 29.1338 58.5649 28.938 58.8418 28.7129 cv
60.833 27.231 62.4287 25.314 66.0327 24.9541 cv
66.4688 24.9111 66.646 25.27 66.6606 25.4458 cv
66.728 26.0059 66.8701 26.5508 67.1118 27.063 cv
67.6328 28.165 68.2598 28.8511 68.894 29.353 cv
69.1987 29.5928 69.1621 29.937 68.9849 30.0879 cv
68.3237 30.666 67.146 31.2988 65.2729 31.2261 cv
64.4849 31.1948 64.1011 31.4209 63.9009 31.6558 cv
63.7847 31.8169 63.7139 32.0171 63.6997 32.0552 cv
63.5918 32.4468 63.7319 32.8599 63.9419 33.188 cv
37.3657 23.2861 mo
36.8379 22.833 35.8447 23.0581 35.5249 22.2842 cv
35.5 22.2251 35.5 22.0972 35.6421 22.0752 cv
36.3438 21.9971 36.9727 21.6582 37.4248 21.1572 cv
37.4648 21.1089 37.584 21.064 37.6831 21.1821 cv
38.0938 21.6392 38.6748 21.9722 39.3149 22.0752 cv
39.3896 22.0889 39.5049 22.1538 39.4307 22.3599 cv
39.167 23.0698 38.165 22.833 37.6338 23.272 cv
37.5747 23.3208 37.415 23.3242 37.3657 23.2861 cv
31.4907 7.12891 mo
32.2051 6.96875 30.666 5.78906 31.6709 5.84375 cv
32.3281 5.87891 34.481 5.88574 36.1108 6.68018 cv
36.4238 6.81396 36.6118 6.22412 37.231 5.8252 cv
37.2808 5.79297 37.4331 5.73779 37.541 5.82275 cv
38.1851 6.21973 38.4106 6.79688 38.7197 6.66309 cv
40.3428 5.88574 42.4751 5.88574 43.1201 5.84375 cv
44.1641 5.77588 42.5928 6.96875 43.3018 7.12891 cv
46.9819 7.98389 49.709 11.105 49.709 14.8188 cv
49.709 15.8921 49.4507 16.895 49.0811 17.8359 cv
48.8818 18.333 48.355 16.9019 48.1606 17.7397 cv
47.8018 19.2539 47.436 20.3911 46.6309 21.896 cv
45.8701 23.313 44.6079 20.3447 44.2148 21.1851 cv
43.5049 22.6831 41.8398 23.1978 40.6768 23.3779 cv
40.543 23.3931 40.417 23.373 40.5757 23.2231 cv
40.6357 23.1641 40.9189 22.9038 40.9951 22.373 cv
41.0039 22.314 40.9697 22.23 41.0957 22.1768 cv
41.9751 21.7568 42.6328 20.9429 42.8301 19.96 cv
43.1099 19.0479 43.48 17.749 43.9307 16.9409 cv
44.9248 15.168 43.7129 13.021 44.021 12.5469 cv
44.708 12.0981 45.1587 11.3262 45.1587 10.4419 cv
45.1587 9.05518 44.0288 7.93018 42.6519 7.93018 cv
41.8989 7.93018 41.229 8.26074 40.7739 8.77881 cv
40.7017 8.84717 li
40.4761 9.08789 40.25 9.33789 40.0518 9.60498 cv
39.8247 9.89795 39.874 10.4312 40.269 10.5361 cv
41.9819 10.9819 43.104 14.8389 42.3999 16.0869 cv
42.0918 16.646 41.146 18.7222 41.146 19.3291 cv
41.146 20.105 40.5171 20.7329 39.7407 20.7329 cv
39.147 20.7329 38.644 20.3682 38.437 19.8179 cv
38.437 19.8062 38.458 19.771 38.4648 19.7598 cv
38.938 19.4639 39.9839 18.8379 39.9839 18.1831 cv
39.7729 16.0708 li
40.6279 15.9722 41.02 15.5068 41.1289 14.7002 cv
41.2031 14.6479 41.2788 14.5908 41.3477 14.5288 cv
41.6318 14.2729 41.8208 13.5688 41.2119 13.668 cv
40.3428 13.8291 39.356 13.7959 38.4038 14.0649 cv
38.2778 14.0962 38.1851 14.21 38.1597 14.332 cv
38.1187 14.5151 38.6777 17.0659 38.8037 17.6348 cv
38.812 17.7002 38.771 17.7397 38.7378 17.7397 cv
38.353 17.7061 37.6577 17.6729 37.4897 17.6729 cv
37.3228 17.6758 36.646 17.709 36.2451 17.7441 cv
36.2017 17.749 36.146 17.6938 36.1621 17.644 cv
36.2847 17.041 36.8457 14.499 36.8457 14.499 cv
36.8638 14.3931 36.8457 14.2861 36.7871 14.1958 cv
36.605 13.9551 34.1118 13.7432 33.7778 13.6787 cv
33.6348 13.6519 33.4937 13.71 33.4087 13.8242 cv
33.1587 14.1748 33.5938 14.5659 33.8701 14.7319 cv
33.9771 15.5181 34.3877 15.9722 35.2158 16.0708 cv
35.2251 16.085 35.2407 16.1099 35.249 16.1118 cv
35.2251 16.25 35.0137 18.207 35.0137 18.2188 cv
35.0137 18.897 36.043 19.4668 36.5488 19.769 cv
36.5801 19.8018 36.6157 19.8447 36.6211 19.895 cv
36.376 20.3818 35.8931 20.7329 35.333 20.7329 cv
34.5566 20.7329 33.9287 20.105 33.9287 19.3291 cv
33.9287 18.8262 33 16.6602 32.6489 16.0659 cv
31.9028 14.7798 33.0098 10.9858 34.7891 10.54 cv
35.1758 10.4419 35.374 9.88818 35.0728 9.5918 cv
34.3301 8.85498 33.4771 7.93018 32.3477 7.93018 cv
30.96 7.93018 29.8369 9.05518 29.8369 10.4419 cv
29.8369 12.0322 31.0591 12.2861 30.9761 12.7251 cv
30.4819 14.2021 30.4751 15.8081 31.1396 16.9448 cv
31.5938 17.7319 31.9458 18.9858 32.2227 19.8818 cv
32.3887 20.8081 32.9487 21.5908 33.7349 22.0508 cv
34.1289 22.2759 33.936 22.5801 34.105 22.9121 cv
34.1787 23.0698 34.3047 23.1748 34.4048 23.2598 cv
34.5708 23.3892 34.4448 23.4189 34.3047 23.4019 cv
33.1357 23.25 31.3281 22.7632 30.583 21.1851 cv
30.1909 20.3447 28.9189 23.313 28.1641 21.896 cv
27.3628 20.3911 26.9951 19.2539 26.6357 17.7397 cv
26.4429 16.9019 25.916 18.333 25.7158 17.8359 cv
25.3428 16.895 25.085 15.8921 25.085 14.8188 cv
25.085 11.105 27.8149 7.98389 31.4907 7.12891 cv
41.9751 9.72314 mo
41.9307 9.68896 41.9399 9.54297 41.9888 9.50977 cv
42.1748 9.37305 42.3999 9.29199 42.6519 9.29199 cv
43.271 9.29199 43.772 9.79492 43.772 10.4121 cv
43.772 10.7598 43.6079 11.0708 43.3618 11.2769 cv
43.2939 11.3389 43.1689 11.2661 43.146 11.2109 cv
42.8257 10.6338 42.4331 10.1201 41.9751 9.72314 cv
31.8779 11.2739 mo
31.855 11.313 31.7368 11.354 31.646 11.2881 cv
31.394 11.0791 31.2261 10.7642 31.2261 10.4121 cv
31.2261 9.79492 31.728 9.29199 32.3477 9.29199 cv
32.6489 9.29199 32.9189 9.41016 33.125 9.60205 cv
33.208 9.66406 33.1587 9.81299 33.1167 9.85107 cv
32.6328 10.2432 32.2139 10.7349 31.8779 11.2739 cv
13.3149 18.3281 mo
15.0229 16.7432 16.8921 17.7319 17.645 18.2368 cv
17.7749 18.2881 18.0381 18.313 18.064 18.0591 cv
18.124 17.5488 17.854 17.2051 18.8838 16.3511 cv
19.085 16.188 18.2891 15.4961 18.8418 15.5269 cv
22.3877 16.4199 20.7808 20.0938 21.519 20.7412 cv
22.873 21.9458 26.1421 22.8999 29.2197 23.5591 cv
29.4868 23.6147 30.4409 23.957 30.6421 24.0591 cv
33.125 25.3242 34.647 25.2041 35.9937 24.6768 cv
36.4199 24.5088 36.417 25.0537 36.27 25.1899 cv
31.335 29.896 27.582 28.6978 26.2549 27.8511 cv
25.3301 27.2539 23.4419 27.2358 22.5708 28.4492 cv
22.4209 28.5947 22.1538 28.688 22.043 28.2988 cv
21.7837 27.395 22.0669 26.8062 22.3369 26.1528 cv
22.5029 25.813 22.0869 25.7188 21.9351 25.7188 cv
21.1748 25.7188 20.8569 25.9648 20.2959 26.3228 cv
19.9448 26.5669 19.8369 25.8809 20.2549 24.4712 cv
20.5889 23.3638 18.418 22.771 17.9038 23.2861 cv
17.1758 23.8521 15.3027 24.9658 13.4868 23.0498 cv
13.1211 22.6631 14.3159 22.7949 14.3887 22.457 cv
14.4917 21.9619 14.9448 21.6631 15.1348 21.4668 cv
15.2397 21.314 15.2397 21.0859 15.0527 20.9961 cv
14.4917 20.6948 13.7227 20.0479 13.9409 18.854 cv
13.9658 18.6851 12.9868 18.626 13.3149 18.3281 cv
80.3979 77.0059 mo
61.3291 77.0059 li
61.3291 77.0278 li
58.3887 77.0278 li
58.3887 94.3208 li
55.355 95.665 52.1909 96.6787 48.9209 97.2998 cv
45.6489 96.6787 42.4819 95.665 39.4487 94.3188 cv
39.4487 77.0278 li
36.7808 77.0278 li
36.7808 77.0059 li
17.4399 77.0059 li
13.3247 71.3037 10.0889 64.8521 7.96875 58.0908 cv
39.4487 58.0908 li
39.4487 40.9941 li
58.3887 40.9971 li
58.3887 58.0908 li
89.8701 58.0908 li
87.75 64.8521 84.5127 71.3037 80.3979 77.0059 cv
f
135.911 21.9229 mo
135.911 30.207 li
135.911 31.4307 134.89 32.124 134.03 32.124 cv
133.178 32.124 132.195 31.4307 132.195 30.207 cv
132.195 8.53809 li
132.195 7.5166 133.054 6.61865 134.03 6.61865 cv
142.723 6.61865 li
146.847 6.61865 150.152 10.0479 150.152 14.25 cv
150.152 18.5347 146.847 21.9229 142.764 21.9229 cv
135.911 21.9229 li
cp
135.911 10.415 mo
135.911 18.1279 li
142.723 18.1279 li
144.807 18.1279 146.52 16.4141 146.52 14.25 cv
146.52 12.0049 144.807 10.415 142.764 10.415 cv
135.911 10.415 li
cp
f
171.446 29.1055 mo
172.917 31.1865 169.895 33.3906 168.467 31.3496 cv
161.899 21.9233 li
157.571 21.9233 li
157.571 30.2065 li
157.571 31.4717 156.55 32.1245 155.693 32.1245 cv
154.837 32.1245 153.856 31.4717 153.856 30.2065 cv
153.856 8.53857 li
153.856 7.5166 154.716 6.61963 155.693 6.61963 cv
164.384 6.61963 li
168.508 6.61963 171.813 10.0474 171.813 14.2505 cv
171.813 17.8423 169.488 20.7793 166.265 21.6787 cv
171.446 29.1055 li
cp
157.571 10.4146 mo
157.571 18.1274 li
164.384 18.1274 li
166.426 18.1274 168.099 16.4136 168.099 14.2505 cv
168.099 11.8433 166.182 10.4146 164.426 10.4146 cv
157.571 10.4146 li
cp
f
175.705 19.3926 mo
175.705 12.7417 178.276 6.00635 186.11 6.00635 cv
193.946 6.00635 196.518 12.7417 196.518 19.3926 cv
196.518 26.0034 193.946 32.7363 186.11 32.7363 cv
178.276 32.7363 175.705 26.0034 175.705 19.3926 cv
179.459 19.3926 mo
179.459 25.3916 181.581 28.9014 186.11 28.9014 cv
190.641 28.9014 192.762 25.3916 192.762 19.3926 cv
192.762 13.3535 190.641 9.84375 186.11 9.84375 cv
181.581 9.84375 179.459 13.3535 179.459 19.3926 cv
f
208.796 32.124 mo
208.023 32.124 207.286 31.6763 207.041 30.8179 cv
199.9 9.14893 li
199.124 6.74219 202.594 5.51807 203.409 7.92627 cv
208.755 24.248 li
214.142 7.92627 li
214.918 5.6001 218.508 6.53809 217.652 9.14893 cv
210.51 30.8179 li
210.227 31.7168 209.49 32.124 208.796 32.124 cv
f
221.239 30.207 mo
221.239 8.53809 li
221.239 7.31299 222.219 6.62012 223.197 6.62012 cv
224.054 6.62012 225.116 7.23193 225.116 8.53809 cv
225.116 30.207 li
225.116 31.4312 224.135 32.126 223.197 32.126 cv
222.301 32.126 221.239 31.5142 221.239 30.207 cv
f
232.093 32.124 mo
231.072 32.124 230.215 31.228 230.215 30.207 cv
230.215 8.53809 li
230.215 7.51807 231.072 6.61914 232.093 6.61914 cv
239.235 6.61914 li
246.738 6.61914 248.985 13.188 248.985 19.3521 cv
248.985 25.5962 246.738 32.124 239.235 32.124 cv
232.093 32.124 li
cp
233.929 10.4141 mo
233.929 28.3301 li
239.235 28.3301 li
243.847 28.3301 245.352 24.3301 245.352 19.3521 cv
245.352 13.6792 243.396 10.4141 239.235 10.4141 cv
233.929 10.4141 li
cp
f
255.713 32.124 mo
254.738 32.124 253.875 31.228 253.875 30.207 cv
253.875 8.53809 li
253.875 7.51807 254.738 6.61914 255.713 6.61914 cv
270 6.61914 li
271.182 6.61914 271.834 7.64014 271.834 8.53809 cv
271.834 9.39502 271.182 10.4141 270 10.4141 cv
257.593 10.4141 li
257.593 16.6172 li
266.409 16.6172 li
267.632 16.6172 268.289 17.6372 268.289 18.5361 cv
268.289 19.394 267.632 20.4131 266.449 20.4131 cv
257.593 20.4131 li
257.593 28.3301 li
270 28.3301 li
271.182 28.3301 271.834 29.3501 271.834 30.207 cv
271.834 31.064 271.261 32.124 270 32.124 cv
255.713 32.124 li
cp
f
278.397 32.124 mo
277.383 32.124 276.523 31.228 276.523 30.207 cv
276.523 8.53809 li
276.523 7.51807 277.383 6.61914 278.397 6.61914 cv
285.543 6.61914 li
293.051 6.61914 295.295 13.188 295.295 19.3521 cv
295.295 25.5962 293.051 32.124 285.543 32.124 cv
278.397 32.124 li
cp
280.235 10.4141 mo
280.235 28.3301 li
285.543 28.3301 li
290.157 28.3301 291.662 24.3301 291.662 19.3521 cv
291.662 13.6792 289.704 10.4141 285.543 10.4141 cv
280.235 10.4141 li
cp
f
311.245 32.124 mo
310.227 32.124 309.367 31.228 309.367 30.207 cv
309.367 8.53809 li
309.367 7.55713 309.982 6.61914 311.163 6.61914 cv
319.855 6.61914 li
323.571 6.61914 326.59 9.76123 326.59 13.5181 cv
326.59 15.229 326.019 16.8223 324.956 18.0459 cv
326.916 19.4341 328.141 21.7612 328.141 24.3711 cv
328.141 28.6553 324.792 32.124 320.59 32.124 cv
311.245 32.124 li
cp
313.081 10.4141 mo
313.081 16.6172 li
319.855 16.6172 li
321.815 16.6172 322.876 14.8223 322.876 13.5571 cv
322.876 11.8022 321.489 10.4141 319.855 10.4141 cv
313.081 10.4141 li
cp
313.081 20.4131 mo
313.081 28.3301 li
320.59 28.3301 li
322.712 28.3301 324.426 26.5742 324.426 24.3711 cv
324.426 22.167 322.712 20.4131 320.59 20.4131 cv
313.081 20.4131 li
cp
f
342.012 30.207 mo
342.012 31.4312 341.032 32.126 340.174 32.126 cv
339.316 32.126 338.338 31.4312 338.338 30.207 cv
338.338 22.3721 li
331.523 9.43604 li
330.381 7.23193 333.644 5.39502 334.789 7.59912 cv
340.174 17.9238 li
345.603 7.59912 li
346.746 5.39502 350.011 7.23193 348.865 9.43604 cv
342.012 22.3721 li
342.012 30.207 li
cp
f
131.993 56.1143 mo
131.993 41.1353 li
131.993 39.9121 132.972 39.2183 133.829 39.2183 cv
134.686 39.2183 135.705 39.9121 135.705 41.1353 cv
135.705 56.1143 li
135.705 59.0913 138.113 61.5425 140.971 61.5425 cv
143.825 61.5425 146.233 59.0913 146.233 56.1143 cv
146.233 41.1353 li
146.233 39.9121 147.253 39.2183 148.114 39.2183 cv
148.967 39.2183 149.946 39.9121 149.946 41.1353 cv
149.946 56.1143 li
149.946 61.1343 145.989 65.3784 140.971 65.3784 cv
136.07 65.3784 131.993 61.2954 131.993 56.1143 cv
true sop
1 /0 /CSD get_res sepcs
1 sep
f
157.943 47.3389 mo
157.943 62.8066 li
157.943 64.0688 156.924 64.7227 156.064 64.7227 cv
155.21 64.7227 154.229 64.0688 154.229 62.8066 cv
154.229 41.1367 li
154.229 39.5449 156.434 38.2388 157.614 40.0356 cv
158.839 41.8711 162.552 47.2598 168.674 56.604 cv
168.674 41.1367 li
168.674 39.8711 169.695 39.2178 170.551 39.2178 cv
171.408 39.2178 172.388 39.8711 172.388 41.1367 cv
172.388 62.8066 li
172.388 64.3989 170.186 65.7017 168.962 63.8667 cv
167.777 62.0298 164.024 56.645 157.943 47.3389 cv
f
177.526 62.8066 mo
177.526 41.1367 li
177.526 39.9116 178.506 39.2188 179.485 39.2188 cv
180.34 39.2188 181.403 39.8306 181.403 41.1367 cv
181.403 62.8066 li
181.403 64.0298 180.422 64.7236 179.485 64.7236 cv
178.587 64.7236 177.526 64.1118 177.526 62.8066 cv
f
193.889 64.7227 mo
193.114 64.7227 192.379 64.2759 192.134 63.4175 cv
184.993 41.7485 li
184.215 39.3408 187.687 38.1177 188.5 40.5244 cv
193.848 56.8467 li
199.234 40.5244 li
200.01 38.1987 203.601 39.1377 202.744 41.7485 cv
195.602 63.4175 li
195.318 64.3164 194.583 64.7227 193.889 64.7227 cv
f
208.536 64.7227 mo
207.555 64.7227 206.699 63.8267 206.699 62.8066 cv
206.699 41.1367 li
206.699 40.1177 207.555 39.2178 208.536 39.2178 cv
222.818 39.2178 li
224.002 39.2178 224.654 40.2388 224.654 41.1367 cv
224.654 41.9937 224.002 43.0127 222.818 43.0127 cv
210.412 43.0127 li
210.412 49.2158 li
219.226 49.2158 li
220.45 49.2158 221.103 50.2368 221.103 51.1357 cv
221.103 51.9917 220.45 53.0107 219.267 53.0107 cv
210.412 53.0107 li
210.412 60.9287 li
222.818 60.9287 li
224.002 60.9287 224.654 61.9487 224.654 62.8066 cv
224.654 63.6626 224.083 64.7227 222.818 64.7227 cv
208.536 64.7227 li
cp
f
246.929 61.7051 mo
248.401 63.7861 245.378 65.9902 243.955 63.9492 cv
237.382 54.5229 li
233.057 54.5229 li
233.057 62.8062 li
233.057 64.0688 232.036 64.7231 231.181 64.7231 cv
230.322 64.7231 229.345 64.0688 229.345 62.8062 cv
229.345 41.1372 li
229.345 40.1162 230.2 39.2183 231.181 39.2183 cv
239.873 39.2183 li
243.992 39.2183 247.296 42.645 247.296 46.8501 cv
247.296 50.4409 244.969 53.3799 241.749 54.2759 cv
246.929 61.7051 li
cp
233.057 43.0132 mo
233.057 50.7261 li
239.873 50.7261 li
241.912 50.7261 243.587 49.0132 243.587 46.8501 cv
243.587 44.4429 241.668 43.0132 239.912 43.0132 cv
233.057 43.0132 li
cp
f
251.697 62.1533 mo
249.904 60.2744 252.148 57.6235 254.23 59.3794 cv
254.23 59.3794 254.353 59.5024 254.559 59.6621 cv
256.104 60.8452 258.025 61.5015 259.985 61.5015 cv
263.907 61.5015 265.452 60.0723 265.452 57.9482 cv
265.452 55.3374 263.497 54.3594 261.459 53.6636 cv
257.135 52.1963 251.901 51.5845 251.901 45.3813 cv
251.901 40.5654 256.021 38.6055 260.308 38.6055 cv
262.798 38.6055 266.354 39.7095 268.069 42.1152 cv
269.53 44.1982 266.556 46.3994 265.082 44.3613 cv
264.107 43.0122 262.025 42.4414 260.308 42.4414 cv
256.721 42.4414 255.617 43.7905 255.617 45.3813 cv
255.617 47.5854 257.296 48.3604 259.255 49.0522 cv
263.907 50.6455 269.164 51.3804 269.164 57.9482 cv
269.164 63.4185 264.432 65.3354 259.985 65.3354 cv
257.378 65.3354 253.737 64.2754 251.697 62.1533 cv
f
272.797 62.8066 mo
272.797 41.1367 li
272.797 39.9116 273.77 39.2188 274.76 39.2188 cv
275.609 39.2188 276.675 39.8306 276.675 41.1367 cv
276.675 62.8066 li
276.675 64.0298 275.691 64.7236 274.76 64.7236 cv
273.852 64.7236 272.797 64.1118 272.797 62.8066 cv
f
290.343 43.0127 mo
290.343 62.8066 li
290.343 64.0298 289.439 64.7236 288.506 64.7236 cv
287.69 64.7236 286.665 64.1108 286.665 62.8066 cv
286.665 43.0127 li
281.369 43.0127 li
280.178 43.0127 279.529 42.0747 279.529 41.1367 cv
279.529 40.2788 280.098 39.2178 281.369 39.2178 cv
295.646 39.2178 li
296.833 39.2178 297.483 40.2388 297.483 41.1367 cv
297.483 41.9927 296.833 43.0127 295.646 43.0127 cv
290.343 43.0127 li
cp
f
309.929 62.8066 mo
309.929 64.0298 308.943 64.7236 308.089 64.7236 cv
307.23 64.7236 306.251 64.0298 306.251 62.8066 cv
306.251 54.9717 li
299.439 42.0356 li
298.292 39.8306 301.562 37.9946 302.699 40.1987 cv
308.089 50.5234 li
313.516 40.1987 li
314.661 37.9946 317.924 39.8306 316.781 42.0356 cv
309.929 54.9717 li
309.929 62.8066 li
cp
f
328.365 51.9902 mo
328.365 45.3403 330.936 38.6055 338.772 38.6055 cv
346.605 38.6055 349.176 45.3403 349.176 51.9902 cv
349.176 58.6001 346.605 65.3354 338.772 65.3354 cv
330.936 65.3354 328.365 58.6001 328.365 51.9902 cv
332.121 51.9902 mo
332.121 57.9893 334.243 61.5005 338.772 61.5005 cv
343.304 61.5005 345.423 57.9893 345.423 51.9902 cv
345.423 45.9512 343.304 42.4424 338.772 42.4424 cv
334.243 42.4424 332.121 45.9512 332.121 51.9902 cv
f
356.152 43.0127 mo
356.152 49.2158 li
364.967 49.2158 li
366.191 49.2158 366.845 50.2378 366.845 51.1357 cv
366.845 51.9907 366.191 53.0107 365.009 53.0107 cv
356.152 53.0107 li
356.152 62.8066 li
356.152 64.0298 355.132 64.7236 354.277 64.7236 cv
353.418 64.7236 352.439 64.0298 352.439 62.8066 cv
352.439 41.1367 li
352.439 40.1167 353.297 39.2178 354.277 39.2178 cv
368.558 39.2178 li
369.741 39.2178 370.396 40.2388 370.396 41.1367 cv
370.396 41.9927 369.741 43.0127 368.558 43.0127 cv
356.152 43.0127 li
cp
f
131.297 94.7529 mo
129.5 92.874 131.745 90.2231 133.83 91.979 cv
133.83 91.979 133.949 92.0981 134.154 92.2617 cv
135.705 93.4448 137.626 94.1001 139.582 94.1001 cv
143.5 94.1001 145.05 92.6689 145.05 90.5479 cv
145.05 87.937 143.093 86.959 141.05 86.2642 cv
136.724 84.7959 131.505 84.1821 131.505 77.98 cv
131.505 73.165 135.623 71.2051 139.911 71.2051 cv
142.4 71.2051 145.951 72.3062 147.66 74.7158 cv
149.133 76.7949 146.151 78.998 144.685 76.959 cv
143.706 75.6118 141.619 75.041 139.911 75.041 cv
136.317 75.041 135.216 76.3882 135.216 77.98 cv
135.216 80.1831 136.888 80.96 138.846 81.6499 cv
143.5 83.2432 148.763 83.978 148.763 90.5479 cv
148.763 96.0161 144.029 97.936 139.582 97.936 cv
136.973 97.936 133.336 96.875 131.297 94.7529 cv
f
161.942 95.4033 mo
161.942 96.6294 160.96 97.3223 160.106 97.3223 cv
159.248 97.3223 158.267 96.6294 158.267 95.4033 cv
158.267 87.5713 li
151.456 74.6323 li
150.313 72.4292 153.577 70.5933 154.72 72.7974 cv
160.106 83.1235 li
165.532 72.7974 li
166.675 70.5933 169.94 72.4292 168.796 74.6323 cv
161.942 87.5713 li
161.942 95.4033 li
cp
f
174.873 97.3223 mo
173.853 97.3223 172.998 96.4272 172.998 95.4033 cv
172.998 73.7363 li
172.998 72.7163 173.853 71.8164 174.873 71.8164 cv
182.015 71.8164 li
189.525 71.8164 191.769 78.3862 191.769 84.5503 cv
191.769 90.7944 189.525 97.3223 182.015 97.3223 cv
174.873 97.3223 li
cp
176.711 75.6113 mo
176.711 93.5273 li
182.015 93.5273 li
186.627 93.5273 188.137 89.5273 188.137 84.5503 cv
188.137 78.8774 186.179 75.6113 182.015 75.6113 cv
176.711 75.6113 li
cp
f
200.172 79.9385 mo
200.172 95.4033 li
200.172 96.6694 199.152 97.3223 198.294 97.3223 cv
197.439 97.3223 196.458 96.6694 196.458 95.4033 cv
196.458 73.7363 li
196.458 72.1445 198.662 70.8374 199.845 72.6353 cv
201.07 74.4692 204.782 79.8594 210.904 89.2046 cv
210.904 73.7363 li
210.904 72.4707 211.925 71.8154 212.781 71.8154 cv
213.638 71.8154 214.618 72.4707 214.618 73.7363 cv
214.618 95.4033 li
214.618 96.9995 212.415 98.3013 211.191 96.4673 cv
210.007 94.6294 206.253 89.2446 200.172 79.9385 cv
f
221.958 97.3223 mo
220.979 97.3223 220.124 96.4272 220.124 95.4033 cv
220.124 73.7363 li
220.124 72.7163 220.979 71.8164 221.958 71.8164 cv
236.242 71.8164 li
237.427 71.8164 238.079 72.8374 238.079 73.7363 cv
238.079 74.5913 237.427 75.6113 236.242 75.6113 cv
223.835 75.6113 li
223.835 81.8145 li
232.651 81.8145 li
233.875 81.8145 234.527 82.8354 234.527 83.7344 cv
234.527 84.5903 233.875 85.6094 232.691 85.6094 cv
223.835 85.6094 li
223.835 93.5273 li
236.242 93.5273 li
237.427 93.5273 238.079 94.5483 238.079 95.4033 cv
238.079 96.2622 237.507 97.3223 236.242 97.3223 cv
221.958 97.3223 li
cp
f
251.946 95.4033 mo
251.946 96.6294 250.97 97.3223 250.112 97.3223 cv
249.252 97.3223 248.277 96.6294 248.277 95.4033 cv
248.277 87.5713 li
241.462 74.6323 li
240.318 72.4292 243.584 70.5933 244.723 72.7974 cv
250.112 83.1235 li
255.54 72.7974 li
256.683 70.5933 259.948 72.4292 258.803 74.6323 cv
251.946 87.5713 li
251.946 95.4033 li
cp
f
271.979 88.7148 mo
271.979 73.7358 li
271.979 72.5117 272.962 71.8169 273.812 71.8169 cv
274.677 71.8169 275.691 72.5117 275.691 73.7358 cv
275.691 88.7148 li
275.691 91.6899 278.098 94.1416 280.959 94.1416 cv
283.817 94.1416 286.222 91.6899 286.222 88.7148 cv
286.222 73.7358 li
286.222 72.5117 287.24 71.8169 288.104 71.8169 cv
288.954 71.8169 289.938 72.5117 289.938 73.7358 cv
289.938 88.7148 li
289.938 93.731 285.979 97.9771 280.959 97.9771 cv
276.056 97.9771 271.979 93.8931 271.979 88.7148 cv
f
298.749 79.9385 mo
298.749 95.4033 li
298.749 96.6694 297.726 97.3223 296.873 97.3223 cv
296.01 97.3223 295.033 96.6694 295.033 95.4033 cv
295.033 73.7363 li
295.033 72.1445 297.237 70.8374 298.418 72.6353 cv
299.644 74.4692 303.359 79.8594 309.478 89.2046 cv
309.478 73.7363 li
309.478 72.4707 310.5 71.8154 311.354 71.8154 cv
312.215 71.8154 313.189 72.4707 313.189 73.7363 cv
313.189 95.4033 li
313.189 96.9995 310.988 98.3013 309.767 96.4673 cv
308.582 94.6294 304.824 89.2446 298.749 79.9385 cv
f
318.33 95.4033 mo
318.33 73.7363 li
318.33 72.5112 319.312 71.8164 320.288 71.8164 cv
321.147 71.8164 322.208 72.4292 322.208 73.7363 cv
322.208 95.4033 li
322.208 96.6294 321.229 97.3223 320.288 97.3223 cv
319.393 97.3223 318.33 96.7114 318.33 95.4033 cv
f
326.693 84.5898 mo
326.693 77.938 329.264 71.2041 337.102 71.2041 cv
344.937 71.2041 347.51 77.938 347.51 84.5898 cv
347.51 91.2007 344.937 97.936 337.102 97.936 cv
329.264 97.936 326.693 91.2007 326.693 84.5898 cv
330.449 84.5898 mo
330.449 90.5889 332.571 94.0996 337.102 94.0996 cv
341.631 94.0996 343.752 90.5889 343.752 84.5898 cv
343.752 78.5508 341.631 75.04 337.102 75.04 cv
332.571 75.04 330.449 78.5508 330.449 84.5898 cv
f
355.908 79.9385 mo
355.908 95.4033 li
355.908 96.6694 354.89 97.3223 354.033 97.3223 cv
353.176 97.3223 352.195 96.6694 352.195 95.4033 cv
352.195 73.7363 li
352.195 72.1445 354.399 70.8374 355.582 72.6353 cv
356.808 74.4692 360.519 79.8594 366.643 89.2046 cv
366.643 73.7363 li
366.643 72.4707 367.661 71.8154 368.521 71.8154 cv
369.375 71.8154 370.355 72.4707 370.355 73.7363 cv
370.355 95.4033 li
370.355 96.9995 368.151 98.3013 366.927 96.4673 cv
365.743 94.6294 361.99 89.2446 355.908 79.9385 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (union) ()%%Title: (USU LOGO_ENDORSEMENT_PMS_BLACK.eps)%%CreationDate: 11/8/10 10:16 AM%AI9_DataStream%Gb!Q;k?8hJZKQ];]n6SG=dg>7#snYH),)g<=Fb3A!b"[%^"<("TD_gSStqe%#\e^6TBl/%Che8W<*/LfksAgRrUt:3q!r3qrU8j\%lBlkQeFTPOjUK\`'ae0+a3AM/9i4c]!Al@=RUSNtZY6;;$ElEXbqV)#YM-^;HZ$Ri%Qj'iB"(uY\([D@Eir6q2K.lAX_,9&H#E9F%DG`]eWnhL(4gseQhk"bUS`RMX)[P#5ke5G_j&^:^:]G%rp<-b-mCmkuC>:]8\"DW!(E_9go^@uUY6VE$_H[1!WP!A#m:S/9r9Rj;%s3&6-/\_=74QW\mAIdEpp+COjm@]*E;UeE0;67D3^EgQ/>UR8*s34jj2h*u6H_!XpZ2O61NbABgq>Ar]oU:G.6W8nT??<6Cm3m;A%=4&)Y`MhCrU2(T@IL-Rf>C_$(E<$&%B%^eD1)-#2n?LmKl`p8hjnrHFmd[.*mQN<o%j17b/'=F>alEC$EZIM!3c<er:"Va\G5Tp+%G"uBcH]6&:[`^>m[I9Tejh0aK:iA3&fa@\UqEMO,QU^.>ZNjIZDS72/?n=`/K'hE3r8$`7"!"s3?bWnnB[08>A*7]1Ka@ch!1g^g%k$?T\CDMn<,IYO(.ZLBI\(D"1+oA]VNt-^n%Q]Zc*ab45:!YK/O.rJ\#*[;DkOIE,)I(BHr.C;4F9;KSnpd5a/A9YN^52Re)-?P0%IMAWgGJXH0GlZ!9BflIR<6`PN<Z[?-fDsoUWA]&3^klP=q5reoo,E2ROI1U['OAbOQA%P/(OoI8&ut9m\$"ai?,rkSc;3bKI%0$!%/8Sm#pmYi'/'Ge1Q;t-35$\uZ\1Y40i=EZi]%G/JYnd6GIq#HN"^=tVph$@S:F[)q;m561HJPmrm<TeFfB`>Ec^<n=oAL;W.D@7'%lTjq6'3jFan0bZ]29D-S1L(Ok`&>+Lr/'a*R,E1.:&#BO_\M-+m"t8N4l_Fh-a"Eg7OYDGa(0#Wpt,r*Kg2h:]oFeW5<*`(0k6?N%KKo9,?9-?'kK\//d;e;hO(8XtK<9*@p_/#6*TU5l1Yska)dD:tj:3tHpg%,Hrl!]5FhIbLP@omer/%OpIJB"MOf=$(b2_N<Op5mf%P()J`nba6ifS]2Gn\Qg>g#L;%?9Bk7/GG',a?S;]=!oF1=,1_cWqe*H%tA%=VJf]]j+Q=/T@a?LQRbVLQFt,&it7Zi,n3LNOjo+A%B1cT9OF/5GPk!&*A$#:3N&R9;g_%(TSiaBDUN>o%5!S3p4EKXYVIn\+`XVZ=Va!ki5.C,F\UrmCT<ff7I+i5uQ?;TE+27-kOQ:M5%QR.srID?^l9]Fej2WS-)I-%ln0>FKd$N7fU=XpH2O/DF\s)7mH)#V#G2ugu79TpY!hu(O'q02jWro6!9]Apu;*V$%4jsU/cr+BMl%J+s!*5Ij+gaq4Skr_olfn,D5B8+HS_4NG.QT=hB*]DRZgL@o7M`A$UX`N7\7FU-+l;qDuu=(0\=BCLD(.Ag.pC7t.R1;$nr>(HXY%@fq\HJTgfqQG;Bqr"o'/2r/d[X^b0".W/r"fQERFWS9;#+2"B,gGC&okCSf0g#B"ilEDUp7_uOCB!#+;!d5!kF:?0@<p.3`)WA]s%^WS=*?,MrXlZQ"-GkLh?.C(LD7/pDP(0-%7VuY3blj^3LE=TLY6Q6tnl,*k:_nEiKU3Bub`2s78%U^mXL12@XPVS7"^KEN$GcO<G%lqhWI'&(hmH<[X2HB2)[`kjYTK<U1,iEgI]Y36UE$/W\XmqYd#TI64B<"i5_A+A;3;Pf)J7BH1L'&omN/$N`Ip`#3jL_7R?jF6\a%n\,W"l=*7(`Y\UYlem7)%WJ<['5,TP_E1H+eTeJ1,H-3p"jV4X+(T_e\Okg"7&,^Q3oQ3Hb7_.[.Sb4iV%fSb/Ar`g&<s1Am4%KU%4<^lU6bA5^.-&q_pZ;bI;4*Z"dN#(^\mng\F-=9D-Q7^[_j:;9#4[E9nYf.MiTE`b34@IB$YZfbGa!'s*MR!jYcD5EN.8c+dnSLa%SjfVF4CKs'&que%>rBb#;_5p,;_^Y,<cRK3S7eC*N;11Gj0%mSik"6ciY.c3PTr&jGCepT&sSq0X\"Nf@ojD33(EBYc@U#Q.oPS\%$YRc7@op?h#!(6cf-B'cBf3H1oX9C!bU_YCi>rP"1.Lf434,`r6?!nam+6>VEq/pUIBEB0ii9C)nQh\GQ*c*;32`&<]8HVs?dQ:*%]8':O\UgO\d03I,clF89N8q3;K\j\^iB.,+@Uu2KMn'.,`]NYZW4,i[Eco5qJ4IT2b^fum/GE+a$gt-&Ms_e4<0V0KZ`6J-$%#!r%@ekp<`Dlr:kq(0A:@dZ]CTomC.37Jo8D@^Bs#+006HH:?S<Ml-jq=q[aNMM'25Ul7D5PU#*I?!d[t`C!1NheQR3lWlgjXOLdHj\5%T`4LmWl;>OG%_Bl#KUP+S8$,OAH$1W#lSF_gdQ8lmMYPsc[UtJ2)f2O6s?fXi^ufe=X,m?/1Q9sbcUX(:Sq$s@YeZNG/XE*4\Ymd%!n(1=Ir;L`Ja4i<-0P,F!AVohS[C]-:@L9Z-*Q?)a)DI!MZ9#sPR]g"C$%f2Fu9Q'T0b;$XY*O*4)CYp[%N9SqXP;HdR%m&X(ErB%+n'8(h,9I:LNO2*C7-cL9*p3[A?K=Bi"/U,Fb+)^'u@NpqabM(kt"_(D5$WAAQ$D@()lmGQ<"N9*q#CSNc#3JP9jmWT%;?&?GdWP%YpM2\nr`q'j"/G/h;c_IZ91dtPeXQc6Q(nbLF2.bGM"ghZ$:(Zb'1hBB3j^0P<"5+ClmM9(I=Y)SkNS,WX4N`Y`A8J;m)pG^Bn@@%hG)dN.BRA2c%s-f_BE6k=DgtX,dHX+SOtlGUbu1r4Lo&rGqSHgJ0iE&YuG=<O#!3+9:EDe$bPP8D!FN(CViNghN@1joRR]B2Mm^/%bEd'@b*fTenL\-uQf[Y$*GN:`Gh%I0p\sQALEU7ZV4k*_E':ueCdeZRL%h(kTtFfZ<NZ^59A2Ca=")[k]Z2:g"+0D%YUOC!JFYaH%O)YBBDerX'4n0HCcQN&OOA,>SL9P@fp6_t'+fU0e5b3o6(sg'cbaKcT4au9^iNG3hOb8fNqEO5]%:1JnQg>=<V)$fgBYdjNI*%E]%4%;+iH(DcW:d!'Zm;o6m\KA*&\u,kfVID/44c6I;MOS)D=q1#Fp4'/3[NmI^@;eZtRVXEqR;_aQB1eeOW.<q<7gO_FMRHNis%N$A%kKf;m+Bp%FMKKfLmmQJ^$sk1:e#nNfREQ7$fpkUrpc$9>(OnIMlYWA>H@io*f#=!ZC(TG?_HfUa%S0H.Ytr*Y,qrm#5-VFqQ>89Z%Y"9[u\q@Pjm)Xt_;2Q$rQb6gO9ko,;0(']o56%&5E=)NNBO-L`PO-<Hfk3!EeuI@ld&4fu<GILSq4,;42*IQ%HolfmE^qE=BV(N!%H`^$]3@+V+(:(]MLi6u<Bb?uYHUe"%**6l.NZ!p3,d\?8RTB/64B'7&a?HaV27BtO8(pVMm)QhZh9ldC$K6I8`^mtQI;INrY+f68%N8ji*3r9-\RkX^h7r6h)A^?[EM_[Y:jtRhr[/o;cco/"]r%O'%RMN[qdK-N(:tV3>C9`IuBa]jHY'\`rZlhqTP244qJh?>=p'kR)%MQI/[+(;M,79dW:fd/'n-naGk'4(ZCAFXp$Oc3ht/>P.V'IrXo<j%\8AN0BRoR4OpZlcq9jKWYSkm&rPPf<W"jF\X]'H+0uSnp,E%:*9ur]L@;t,h8%5<@\=8-//pj>O#)ji6$XT&YjJ"+3Se62jNWE*Z=hYS(dP;'BW8#6eR[>XA`X<7VDlm;ArCE=s8$Snq<\dqc=cd%6OT5iIUopL#JbM:65m=n15U;nQ;P3<ZB&g'ns`aVQI4E]<SKCnBQ)5mNOjoo<$cHSH^3JsH-U_"cqE2Uk:f]<p>csO^7mcf3)a0h%P.=E-QXV/0n8;N$-)E^IN!apJO7dJ1TIet0fTa>3Sn3hiO;^#B!U(--AOh'8AC\3HgN@5d8mTON8Ci'^&'^d(QhC[1>Zs3dqZA-u%Wd(,?ja/XsX##OjcA6/?b:=:30qq=Q-DNoU\eNO(;s^uL!_C(_,95?kclfV)oH7EW+5f>EelY8u$uFMJVMp$//J#J9&S0miJE7r&%#$%E8HVLT3nYjMH9A<<IJN+1Kf5ObG;ThpZl/Rj_-1kmN0&kN^;6c,,PC>U51$T"($D[PHXdZO/o``=+p[97o"]Q)E&8T[-h;0!W%kI7)n,C#,i7q/%N^"DEr8"jGdMcR[baa:?8>Yj1<d5`8/G(f^hhZA6,a3j9X8D]ac*DfY7MX[;7:VaGK:@n4<]Nc&DP>Q"cDrf&o%h.P8$s,J:#(tW.g^h#a[HS93?#]<!I.]aDG>FEnEpZYpr507#`oUn(@#<bcN3hgV)O6bKjP*'<qarjb-Y]iP6>b$Me^<]]7FYcO&%=?cRFE*]!YBE>Y7qG%@>6'Y4&7/Y%]4Uk*4=k6;i@0KaGU,ceYWANS)q,(h6("k'E.u16S.He(,N)t!]LA_Vpj.l2YH'[I3SZ:iI%k@md89;D9[D=LQ0DMKH<or;$Sob;-opR&M.s/NGu1#8cYF'9&8m8j*#5P+kK:JR@l[oZ>RU#0e^gX,fe"]K#Rqt.h;3GcCFUWlR2%m</<fB0/%V^2Mmeo7r=^6[kf\I(A^kjTUTmc1;kSh0o4%afo77nT?Il^FpVOMY`T&\Gb6rlbUaGi;`-(mBP7_gsO4aAc[&F)kFJ+%6iK`jh=B\EIcO4%J-h,#s#\4[U_d>I?5V/i,DcWPOij6OJ))O"3dCjQptskRV9s$@rou=H+!0n1#)IQmNPs.t(p)S/FIN4+oW.mO%"'PX%I+rO%G+X1t$pY:AS_iC4X*O8[\(?!Kgfq2^Ze]m:TT,VPQbSukp1n'!*i/=HT0I79?IQL*D>O)'EXs-Vr9U2`rVVP@Xne09%`bUd8gO#ktbEE?FghOJY3dH=(?)%)pq?;-[(.er+3]1h@0Esu'dSdYMFSQ6?C\IaF27pEIc:e%A0D%nd)5d&SL7q6:NTXo&0ipD]%I!u7#Ml02H+IA=TRTK%rh4.0nKO=_5?Tu@lIKSe@GpC(j^\Xhgmf@`S9^OJ#F!Y/Oa'?=]3sL2TbU0M4""#iQZPML!rb#hTVTqja%MBRmYrop&CJ<`;!bV)s.6!t,:GlQ,9liC3B0tXlm)[?7_rjdkF"0fV`^&QI;m\$[)nf7Pb<rd*M[<g^c%*r]Rp*R,0Gqs-OA4WGF%#kI*!5bW;PBJi(-dj,EAZa+LS_YiBK!,9rL2%OUFDKo*E1DrYimQu+`V"\;J)SAQqWsV(#[>3T9*s%+V,/AlW`E[!&5+C(]-2BXL%!rhn<LY-9^rf6q_\+6BUAttW`I;RcscN-$@DNoN_"&+7CluSs!`#r'3]!(L-Uf@M]2M5ft?eU6cBCB1LM[V?EjK@>(0]XJB]^:+B%Xk1i?2aG'#*ri,Ukn05IIg+BVa`ei!hcdCXhE7_uC]QH2D7e3+cei/R!C*3ig2#P0^-1ZX\cLlVe!J+ep-#WN#OQ\Z)l09b-?:^/%+sS2L4R=o:c!DI%X)D=EP5jc(CqoXHO"\b*YPIWn"AP#EYLmCke9UqpB'0mfZ(%k2+QiArZ^]hK?0h"qOFT[Uht[bD7/KEeTdUu!%6EbJ:o1ORas3g>rD]<)Jgr6?qc/2/F4T[ed]k76ZSKr6!BE1tnoRgARf*%:8mOE'X?mAR]IsPhd4i+/i^Xt0UVRdE*r8=^O$4YFq%[kKHaO[q`ZgpZ(X6FB'7O;T_-=0Pq:mf%qi4Pg2%8[9>gjf_Fc.>Bc=n9pMTC4Y=K2BA[L:@g[0AA+:DBHn!5Kmj&3cI_J+H]?e#%emn/eDq?6Pol88pj5nlsitp@Jm8pi@V2N%CIGhV;R0+)[hp8D@Ge=1OfQk,XlU_^BPrkOkOAu7!(LuYnd-C&XZ$"rdq^"g,5/eVW%^L+t*c[L-'hYbpfF?b@jOtnK=oWO!>,m<Z`[!V=2PaG$$o\9CDm!sB3b^c&r#RmNj_3g?:a$c<`?.\Hg#u3@qg42/5[o`_A?=0r0%R'qK49W4qXaL(re#&'GVKKjEWs#2\/nm@ef*Lm%`.2nOs7qJn(=\8>5dG],TJS#Xcf"b`tamgJ9$^f+ed8^*pi6q&>J,L1!j8UeP%FBafMs4_+iWYe1\12Q2P,d$a5q=s8!$[6kJs0G$o\!<]URc^8crTj!fpQ/rhU>^TH<Uq(@"'5)=Q50AsT3dNOl&,SCq0+1-nfM4u%F<$L1ESKo48[-tIg#F_5A6Dq449#KLTB+j#qlOqkUedEVa7VZ1WW2T)St!F54d\U3cGLZB*`Fh9P_H[MN>VeVGh;B=2t*0#K'\[S%mC.G9a5N+[mI16G;&#W!&rcba!>9,[M=^th/R#m$mIbH3%.Odu$&qjR\Y8Z-I9X@"[kKcX`Efk(CZAL&ds1]=%*prfXS_YbHJ<2I%4O']4g1eD:]1nf$0XOKh,Wn![gqLaKcTEgoXq-X<*5pj!>9oukc+gXaJ85)RKjp_Bm\<0<681A1"f<G@,/8Pq<l%UJ7>+j*K:u?#%N6IgPPbg/GZ#0\3XJ)RA\)-I.mN40\L*tFi7ZBeo#Hrjg04d/;J1?VlMs/4""!!Y:J'i8d53bp56@[`l.M(NrRq5&)2]n!\n5B(a%_/"H(qn9^eMX1Em1DR@/k9D6iA-)8?m%WkKk*PH^[L1`[Zdn26=P8-%p@!C:oCs,BA+[\aqYj.WE2.o=]?![/)[.T%LE:1ud<.1s%oXUZ#$-fTe_cE]1$u`%<XE.`bGCC9*-SO3O-,"rL<o(AWX"!oaf^>r-R8]m4f%o6*Peq;*?Fji!Kf6WbQ?NNH99m8`T8Ho:TH);_%4S\(;J2VVBp1s5`J%kQ4pT;f.`4"pEh9&a^E?fUa/PmjtPdtmo[u\V!WD-]f^D]7CK%*86m?\k_R8_hH<)b6)?Cs?:[-Kn45QM)7%k[IcTdG%=#)\mn><r[V#L(<5&O:?'rZnH^ad%L>`f,i;3S$I-NE;u6(FAb(8?;G4lc@#rEnb.!i8K^jq`lj9&FcJCuW7<">I.nTl%*4)Q^P@FO(GmfK</>rCCp$Bfr_;Y&lr\#jO7aTCqVu?3aZBc7j'UU/j7qlpsdPfPM#!8tZ)CT-Ko_%,/[A6,4j$t"q"-AACM>$oi%AU3J3*\l8maZQQSqokW&[Wuei:6NnL`,@JaOSIMPf!6["QK]=P/N^ZVZctn/bAGp0*N2'S5C[jG]g9ma,0aTam/(Dhn^gDV#pQ>l%D=+HE<!P;iODnsH7ecV]pY8<%3S9SNFSZOF@hguE?SGE)QqWYu<G^pQpU?LqPcb_T*OH+X+:9(e";1LWmei+gO+^Qp8d,#`YTdJ0%XiB[7CI>I%Yn0I\K'*J53?/"&H6rjeG;IE(Y[tMgT""_gc&AKFC^M_Q(4=aQN1W0-Q]L(q%;=<!A8)K.4YU[1[aF?:+P4)4J=?W2%+[]a86tBuc#oU=,=pN$"Q.Z#Fd<Y#3B:Ya$2sUlh"1-;"3[3>lCq\HGch:!Mj-#,hN7+Ag^;XJC21&c\866F_P"nudOCK-ZnlHS]%KU*<FTjD*q+heu[@LY#-6JNMq%'ogVSFg\XH"8Ze3%O1[q<p/nk;R5O*o_f,A_B0WNqq>riVG!piN,B4M6dZ=DjJ^i-%lLHkV\]&%.bi^<=`'l9_Hn$ZbocYrg=^=7.4so20<@>/FSqJ;HobH^]a%'a^Z`L(II0[GU\`HqI+k#M?>3Ag.[R3m;f,t)fQrpPe$i@)Q:`sR%\\c;%lI2Yf\c&`"`8\ZZ4SnTS33ht]Hnqt:G>Xo5;YDrDZuS0"_j_=)\KdlMFn]9aeL+koi5_k3iTQ<peU%5kC$A.$D4g.:^&M'b%\nP2cKhc9'jgMhs])R&(a6g#j>G'3!p%DJIXOar]W`6aa0>H"<at%]$I+`r\UZg/s$^IRa@i0.98m3i#W2T0rdt"^;7_@JOk@=5o%%'mCFP`-8^L-N#I;t$8khqLpKPktt@NI9Z.g\I^g5=+2PgVW7<`!9I*m7[,O=R%r:L@aTgDtnI]"`IaK_h29>^?o2J`=KOoIlE_'%^DCAbrB@p0Rk$m]o`qlGG;]j!K798Vm<$lF-[sE0p"Ge_QKS34Es7'Gm`a\I;So*h_e`iFZ5,['EI"8-Q2/,G5pu!m<j",n+4'>p%X];?M3Njb<C/#EQ:Whdp6%:;P;dW?!6")?r@5jP(B=;`:(U47[rnXfsTSG<Z&bP?1H`_W5'PR$F(>dM5T]C%FkC"=nY('N2=2rBh%AH;umg3odhrDPk!:pY9ug%,IA.@Gs.FM<5QS0\SI^U%6Y/3S1'DY]cn2!>]_XF56ENaM+Mak?*@rLjl`B]nc<>*tdb]D<:%W)@hT%X8\bG8pFF8:X2!Cis.Fo^FAho>K=!!SZI$"(7n-2-ZOe$$HhMjgO@"CXf7`NYP!O$PtmQ)h:KPY*-An*]gqbk21'a\%gKFKF+rg]%GO:A_1$I`ICh-B.AG>>I#H_8reO(kc\utC+e]bNhF+s&Cet9,D1j*?VYgGc2ju\W\K<@Gp<6>N"?HjoHbKVXKMDQ)7nBTJTc@'c=%(H^j&c.^4V62.Rl5&\@KMNZl,W[ML9(JZN5-[2KF:4D$U40aF0mAfQl5u0F4Rk5O8=,:#FNcOinY9sai2L"lnr'rbjd.=["q7&^V%-KD<h2s&nA!eRTbjkIV<\bJJb%t=JkW.(1r*V<R>GXR1YId(5*oARQAMkiZ)b0A>+:[s&YXNu$lb2#[#:`+n@Xo2S3&eODG9q:Z&%]0'b:ZF:]`R^LGqq3?M`0(^mC_:6N9mr-N2^m4X9<]\X9rg5pA(5"f]o+=^g6.t!OBi&YYF`o8tBX-%bom$lL?1J5S;1sJP/P]PH%=`kR'^"XnAYM1Z?\i*bsN1bBh>X+V76,3)Y5DRTIGIm9`CZR@2!lL?#7H(5WAFG!B%>36hU4[V1fB1#Eb=BP@9".PS$6MIZT_dC,%mOes+U[VHbY.Ec_eKGF&oHAJ:r@iNE45,ET[6Ej1.Gqk0/emqRnP;(`ONEie]@WZbT>*614t57<$b_4k1TP8cHT2c7'R$.`3)S=q%Y2[ni$+"dO@bLEg'qb5_c/dHnX&NYM:L?0V_7)!Po$lFmX^9=N=23JZDf:,m=?edK*@3i8IGENT4OoF@\taYr'm:B/bdW8gf$43j%lJ#"Le"*+dbP'Uelr.QsX"$!+[MXY%?"MaEbGG39eq__o<GaVPl)34@b,=k(aAWUZ],UA)e"+O=KX\E+D^s>)lhIB)jneG23INOZ%l2EDNjPSd_g-W[JMr2j,\"k<4IK%]%H>5M2:G9I'>/uUKIQ%I@hr_+)lL'0!k0KH[LG;RD(Y[$mU0UR3=S$":hO?W@`kVINq=ZN6%H[@OAC#T!RrbQaeIkC)&VmCDbPUkt`8$fPs]\*6hgXn\Lg3CW8I6sl2^3T-AI%.+T5(3=54?HpF2"?3ip0eB$YKY7pT?fIo[oZr"%5.u7`h^]#4<Hi6T2b>Z6lc3GQF3X&2f.?,g9[)sQ<$rH^a6++oBA^P/]Xe%t0mbePLAs;&s0FJcZuZ>Xd)D3nYH=t7T3sQ)lSP1t%EbWjFR/qO(if0HKnreHNnqN\b4g*ScJV?$c"*^XWQCFF:D._mK8N8f\m@XemS^LC5Isu!BkB?^s.B)un_]!UJab*@>^FplCWmiu/%K7lOm.I`L,oT(s1Yb=?9^S_LO3FO6F]"-M)oENjn\d/`1Ceal5hQGt5S#nAr^BFj":8W[-4^(&[%!qs4_j!A6N:O5r]'g.K5ql3k%C]'jFj^n"UPP&9TLb$B\P4+Jd.!Us645;.lg.31tXmo+s3H;03OX(Eop;gq\H5HNGft%HmFo+O:=4KaD2/%72Qe7,m\,/kd%]5[,%hG7fFH*B&dTj?jKk,AoR(:[sP>5n<0(1CKnHZ=4;UYXa=lA'jhd/McH`(8*u*5?c<$om*J'L1055kp)n6g.SiMoS,43rB!;ETX8F%k1r#RJ;Gnf='oV/^I4hd0`4E)Tiiu*O"#!tq+-lG7!i<*=&jBlj*)L_l.gtGp/Y71Ktn4\N4utW!a1)oLEHN:-=XMlliO&cHo;?9%qLQQrE\t_Y%_NNU(KPJIXT/D)Gi(VHKO6s:k'EMpnVCP8-e42M.PdjKj4*WDrEt"n]S:b&8Hg#b0/d1oI2e,eqJdMIa^`o2VXEfj%XY3`]Y)n)h/uinQkjP.XG4oKcd/GWb$$nme#\gAiKeV8BoBF?=^42V"0<gb9OHn8I=Yd8F$5pq@8!`^ek0HIsb4=f>_cW#+g1k,D%Anrg=-fMc";tA"s^[7oY4dUo)M!2BSI#3`Pg3)L73.SL7Yis1D#4BM*RTfU>h=S;*it8f3o0F4)Z!:GD53SigLLg9+rjW:>?2JSB%6P"Jj:2D;!j]pfno]_Du]0e/%XMl%,f2I<!rIK5BBd-0UEHCEK.S+'C<R#rb<Q0mDbJi);RM`9%":8#=XqjA;`acmtSL_t&ieOb?%*o*XCc0ITI(,)9W5/dA(T)G+RV2ma5=U\-t6:tmUi`1`Yik#8p$cQLTDmabQmi%D%IkpM!3nFri2sO_EKY:Wl/b0FW=6`F@=kr;+%ESH>9;KtS!LQI*%`/^ON`oN_[8/nC\p;0F4?:;oYIhH@jrR!O;\tA"!\[X@5@td@\,]o?ZqW,:Y[KPGNmA.nYXJ0>@mBOQsH@fTE%A2AsRnU<8F<<Htb<u>t-T:ECLXf$F#LWSFKUa$9!<uO%EG;;TgqX_g:d_U/=;b9nk(VHA_#89fm+_5NJAl<LFcjgO@l*Bbba&?!L%UuYB6]:WfedcZlGAF42phiTh#d$Zk9Q:1>^0@I>p`dk=uU`C%W@>Qm!`^F?1&=U%IEOcd,>doepC;X8rr`gntO7VV<%ZhY2K/R%r%rRsk#YB,C]"$>@?fSY"7,B2bJ/a_<I`m,-U18!_&mpp@=i8[:Oiko7R]A!S#&[l6mFuBl'Z\B&)f!=$&KgHEeAD!b9(G@NU[Zk7!%1.Va_R7Pi9Hl#N^Z+ZZ`oT?tQRYt0C)](HQE'?9(BmLrj:_(U.AND)$%YhE)X1dHr8-isHo*OmJ&E4pc6,3r!9Uo"`0[uoT.0)IK%$aAFTm4enI=PnmBrVa\-XXtX^V5$/>&a@i;D_#@UB7qi3@'!0$epUB86WCj_Q[s)Xl^.6GB9H'iHX$<F:0qP*ceRG!XS/s*GbWq;%]Hfn23<HKmK-K?r8h\'>.*'i`D]-4U_9o+*;$KgROJKi.^eUIrT1u'YhA7?_VjB,70ZY]g&<d"Yg[C;gLC]S6(UI8^)^tOBQ-e\X%[JZ'S`q*i>fmPp-'bXsg=Vp`+/OPIL2]t_j:V2+8XGBG9$]T2U)(#QN'X%Q(,fOQ9PT5dSTh%Q'PfD3`-#?3B6quo"noKKn`jFBN%jeJf!i_J3;4J1[jWBlhh#^<I6@5Y!=IBfI[iUYA5pgkhQ"5cE-b=<6<Pg:l;)i`G#:()B&"m+/]I4(c]hB`/.G@6Yk^3^r2dY!7a%IT;_Bb9D,riUi4EbHa8H<crJi$fV!m=OkA^3o?cT?'pd@#`j?sJ\h)WaI<!$7C1"7Yd74CIUO-fO1/S2b,@)+6?6o@D+%R(>t\%?%JMY$VrIc35+_Kc,M,QV`F!1-r*KA_WAF_GQ%&rt&rdIORi=j)%P\B9.O>QOM9@Te+fXOZnkSuUWE8DU[_7:m5qBV^',oI:2?S\?2%@".5FEW3KrdH4pag?J)>/La!f]J0VIepWFI<bJo"@ld7HoT?^?is??AVN#IB<PV$_R2hLd:ZE_S4*^dIG_m1P]:aUBQY<;W3I@TO%DA&#Ues0k9Zp`u=98m[-KJr1lP3>2eNXk)d'[O3%;jdXkG]c35e<Mo]+[aQ*`EAo[Sc))#[PL\"H4fr2`%6!gN0#@B:DC.%YJY!;%7%*l6bTA'2(th0jP_4[+&nYN9;+#6"ft^d%59m'k:bT)>@/n@G^j_G,-da3#4\_TpL5bu*l,#k$]*N2io24lO&<U<!+^I'ra+k_e%!!VN,Z,,-*3m6MH-L/I0B*"Q_*-8*p%Q1.Sf4*p\LU:Nuf_HrhIAdsU$V/WSkAg3D>VEY)^j\%Q_fT04,tqfh:E)_A7W]fNKJ325%:lNhhqspn3,[C::S1aGVAMADP:W#`1"^kZo'A_%I.Z#\),8TJo%'V-9=LqBW6YDf(14uD2?($>>$E:<hN3S^9et$>cRHP5gAE<?h%do0WXN/r+Rc4d#Oi,lQoPiA*q.6.KW72/ZT7P.mmWhmXYEh[$SmA;jW$(5SNrr-IcQTb_@)41donVrI)FPeK^b$,%\q@cj\JUJF$%oEIDCAL?Df(s<Of:-'6umj(eO./c'3ZNLr:;CnXihZ?5SL8po';MIc>KnWHmbL=NV#36^3S.m##?LZ]#ZcCPg`8\]''<I/ISQKou%DW3/0EeX&5d%sgjoi2F6Z\C*GJr[Ord;.so/*PE]"c'(N9<Xur<suaWL+^/k/lrlc%:+8`?)1Znh)0<='m."'G\ZHj/*JCn@gk5:%l0YGGBack@knS<V.,64.FQjN^_B'Y$6PiKg:9H9tNO-&lF5W64J_'i025R*>n)9&ITZ$5_gY!#.;?<h:`6?rQ%g+RRZU]<B:PZjK%Oscml*R5pCRLOtKr[OE:9XFPR`F'&kJgfS6^6HnY7p[9?Y_+IhZELGkLgMn^4`ZoGGY6)CNs!7,.9#LbRD\7PO@=6DABj4FJ?;2L%4i8"2%?V"7]UtDso"?rQZT6;ON@cIqDJ?)I]9dXrYh1Ot#ru6u;!OBE,K@%A/cOBLl6QljG'd:?86B$s@T(KoK<FH(2[$b`WYnq-%&(t)F"Uf_/c%YYD9g.L"a&G67PZa!fMt@^=JCBtqID`:-6gKRtVF-W9ME8JQ-&dJ)qg.%#G/,/WL<]u.%N"uZ,kmdJ"[qf@Z$LGR%$iAta^aN8-Yn$-#QYoP,;ob7(l%7-)G5%J_)90L_.mI^4>ai+T>PjpEV%cih/clQI9$W"^[P$&.\^Q1Oi.n8kHV+7g^sip<Hin.n%P)1>]_^dc0Go7-(q'R9+PpsUm(=jr[@dJDkf.n&[P)hqa?DNZrn&8Bgn8!7E&tO?Lh2"5f:']e1f"_>V_<QksbER=`W3f+\^_\te%Q&f9Or\8r8HY_(JS=!OsB<NtqS)Wc\Hm:u4\=EIN8f(Ta($i71]iT]]'6"R8Q$_[(oq.0gq`MtHDM*4a0KPAX(aER`LlB,n'aC?V%c#VK0s5]%2[?GEMV"Up;>7B8KgOlM8\RHtpejid;]F5I^k]<#bV3G.+(F+'c/#)$Hi*H$n9W=+2CuO&WM0S=1AnBTd1:rt0J4X=k%;tLbO9EMN:/e\O"Wf0T@;PY?ObLqW-aJ;L$+&7`j<S1l@a:-3dcVP=B18X3D44_p-h+0q'T6=QHpiKX_12H1#jQK`]T//lG]JI8&%DSu)/;'IdS]*?cURF.?:'9Vgk40k3H%3L^hW>9UU]Ji,9\6"(nWUHn6)^Zbm&EcR%%*Gs'=I]K'Yqf0s[Od:.\%Y3#jeI[KH/i%d%jk$&Ce0M2fWp(B'=W@m2_X3:0W'a49bFB#Wj=FkU.s&TUa[PjFlV=>,Kn8>qOjo)\C;E2YFi3;r`b)1;ABi_!YH.8;>\^,)hujWA%Y"Sab<KNBMV<Yn<;_sQCFb%`6B4S9Ab74B`k;_bc3$2`t=FB1U\G(B#D"r=dpakWKf>ET4TpiM5DErsAR-NX$-BHB%KBhE)^Bg9q%+8F]=\7ddb4T6:<4^?3T8$TBTf>D1p9#);/i<&lh9^*L;4^<q!Q>ipXOd,S]cpd6=lKJG93@?TQM;`""1.tAQ?^AY-GlMmXnp2!:%))EE@p61d[SG@gSqh[;Y_p$-,a/GV-C[ATuI_Rm,#C`mF4&$0?7J!&Rn#*I"bY]FIYb`/qKUC,ur?o>-CFg2t#JJpV#/0Bi/=CPl%jB*TFeug[`;,/%7`W=t,@)L1>Z$["JqFP27Cu-]81BJL"HN>H5nQRs-:\&dWr7A:ge#]g\n0_fPI17d\<SuCHEJ4d_(`'smRaPm[%FeBrOHlNm#f71eBOU@Y=Y9NZ9cPS-0eOag%'rd27]uBVMZ;m\e59n:p5eU9sYDNaY9s"4KCdi+4cTh_@iqU/M@ZZh8V@K)+KO<53%SmC\m_r]PP)j)_T,td,/jk*[.iQrVbR*cRRj?#umP4iJ"V/RZu/Mia1%Hgg,[hLIc%AK?;5>hh))c[`%.9obu/>I\!qD4$XLjVEI%V=5q(+>MXfiM6,!jk)bqL';3FI%:3'_$g?Tln&&Xne#]*gMZd2_o!KIKWEKN`DWQXS<VM,XRb\8d03%^:u!%Y;FZNL6q:b:K89LJ%nZ?f9j=F"i\ffK$H1fXhI]]65XI"5P]=#rYQ(+$leL*4UW,.\^T3%qZT22J&$R]:^g-6?(pt+XO[%+,F0<XX8g<AhmQ#/hppBKX!%B/.ACqeO#O/1fGIP=/R?2Ka1g(^sc*9#+Jo.p&'/`GQKK<G-P4T:/Yd8(VK'$u/MqV:sgiMVSJ9fY-RlKAs;mM1afag:recZ0&n<%G*-7C6W4@$)D2&cX/<QrUW%+q6"VXH_TnNAWN_kn2i<HE.eT?.LC&UmI=)3.^\T1Sf^1#ffPT>7*d%!elDm-_hgKm+K?(Ypd\+W0%khY,V9,nZ,=KQaM&+Ad?J$;3;9AF.R2SW/4e5!1qO`nr%d?_q9q;lXO*Z(-s]pc,c@Ek-.e.D;dUmW'R>"QoJ+..'f[9s$;k$7\?%W1"mG.9gN49'!#kUKmY\r[IBOS?(^B<<hNJVWW5LhWrg3P)HqB0(tba,MaV(A/)38UM'%uL2?#[b(/r:L\(@?09I38f/KR"j:^(2%E:7#N>hss0)L0k!Au''1V$qcFmJZe"A`oERT^V!_V7U?OJ8S2ZGPGpapVpWrX/:gH"8jS&\>nfQC?a`m%l6g8?!L&WL0mEOVMhLO%)klhBLh#ei9`'$8dm_UrXfWXC2-jHg"2>C&F>[?o;kHc/%oZ1=G>8guQ"-hkMlW\4S;`E#RP$5<')jN=33)6&@dUo(3j*5/Pj_k:%Z'm;JQ7e[h3f[sd32K?]5LsS\\1'k]Ccm#$?/5G@$:C5Z)62r\p+J<CC8>UUriQI^.K#3@\n'Q9SCM^K@I2h#FT#M(\(&E':%qtQ%%9H7?k@*Jl?;26f!S(53[@/_NKA>+[l/GH2qJtLaY,7,XV2KZ'UK>p`Q&gVp7`J;"(KX6GeM!\!e&<ITFBd<uWp)9<EfHc]0!:Km%jZ^E+*Pf)9C53eEaSfS_#+-5F$cFA9G`TD),?s,*Anf*4`OPB;MjmVEFn)X3l;FaBCj6kCZYbLh4Y0%f`4%N>(>26Og@G[d'!%Va%-e1GX9VNZYm;bSA;r!Ts]43oi4ag?n`?eEX8XL2S27%=AW0/[t&]L8'5CX0DKU=U^PfR)pM^;_P2aknor&&]Wmp'E[abRXn/m6&=%c>Yt;opWLW9!2uaFIBiLSt;Q*0"N!A6(d$7A"sgKA@UbS918=AnCRUa7MJcR]$"!P<(X^a:=d,gP6[Tp("1]/(T-3C4OeSX??aCi%B<emmPc=G#E/G8ZD0^<c>+X?:9Xu!*T3gr!Hm.<rlO!jFkDmXH+%%4-^tdgPV@(6%,`\s+Bo!UA/4jA6M4q[4-"jbsMe$@J4ji50%U8!SG2H8+M&!j72hf5>V1`P^jI+_=Dj336=ad<Mp+L1b33@j\1W-k*Sq'^oB8c0QQXtX*Fmo+KT08]NCPln"PM!Rm:'HWdt7@al?%XA-6V4^(tRIA/^:3VOUrd^=2jY6&0GQ/5=Q?F%h:SS=KI_ZRJ#&XC,#o+=r6\F2;oLd5`m/t,'8YimB-"$H+l*9u"H9_Xd@o#>j*%+mR4T<G\87'+5\4iVi1CVMg05=$D)'+4Zm[oRE_4?)Q6&cZ&QI$27QpIA6MMX,>bt393Lj&I(f[A/Olj(N$AO^-[RB56EE71:#k0%2r+6%Q19(R]o*?sDRb&n^"($UE0k$ndiEYmW-k[!N9R4P!UQ$GVS'1`,phAe2tX+Z5OI9.Q^$U+ae<X_)fX^#@Xef%n-sSE^M8d#%.Uspo''U=VhJ;i%g;`3uJ6LT1p;5P'jDA_S+G1=GWdGdR@I<`[\E`cr^N7Bm$ldHKqaL_\1PWbMlpW6^V>F_Sqapc>>VNQ4n4h!B%18aZ:lJ#f.qDEXMqI=ClL(,e*Nb\gdI7sRD9ZRX`:rIJ)M>17_/N0hlWNRKsS(f":QUJmm@cV($!*<K;$<(Rd@_1elI/!C4Q!!7<%[>;r:;n-1R!CkCu"nPQF+]kHTZ^*=W1(5\PV2/Q9UK!*QF@es>n1rBFUqDUoCKreN*YQ6;&Gs^ur^(s@7G%UL.-l^!@k;prj#[@a%fMua,ni\m)?iJ'\_hHUP"\6>qn[;(?02pEm@#9&pqLtn>eT4oRX3\IOWID/f2kDQVCK<Ke27:4GH=,7ib?Ub;[=7qJqR+mW05k!#%5$'Y"GEp<?Ba<*H:L9mW.C?t@'@EYt4`%%"XfJsX\6K&me#lS$\iX(Z%$FMe*cBrsh*FpNT(t'Ipb^A.b2dNX<c[S7GHu[)8fUg0%J(Zf=)`1XSHe<pM@aRJkUg8&Nj9>et=,D(2b7!,kllpc'ST42(q_=f<DfRb@1p-BC6]E\7",mhD5CInhgc60"_i*<Q(LH?+>34YJ%(5fptC]E*q^*F3b@CQ&OT/:4;DGYWIS$RTdObdDA[XY]Q0W;;m]"B^XkRe7Bd)]/(RUQ?j02[D5gpd1Nm62l*'=l\7m-EJ$4W8Bs%geOfi>q<qYP`/grC\?N^PStoUO4/8dBp/r&Fh,RFAfo`0o>f:$o2RYqY+T?^O<g/<rQ.)HY(0'2e53+u8VKkea2X?IF]D.0X:!!U%1IRB9B;-hg)7D0cAsTL_E2chd"^o_2:VORnD,>taaFh`*:[JF-^,NO!3_[]YTIGRd1PT6l,<^C>(<)Kd8cb.9`'a)g8tOTpc_iud%2Cu"gmCpL(bJh8FRIQPIfu2G8>1V`WPSbs"2f:0RNN;%+O/X&^HYj1h4Ku3YdGn`oCLd-W,OB^2OnFgn[=2b!3LW$5)okH^Ym)mt%^">TR"ZoB&d`N1EM^4;;C@,]bCh%KEIEbn@bcURs/g!)@3&kD%\=T'Da/95HY-/3VCG5Kn=)fBF_H>O"1A#.6:]eJqi3+b$m?'e4%r-gFj3=]+]k4Al8R?G+Bm!J@d#QF-$?"5b5GRHrMjcoW-?Y3?-M;L>7@#YDhe<d'i67H;EhT(q&7_Wr/>REI=re9VgAld3C`^UAL%`JE@mWO#KWH%i;7;`YkBq<p!S)gK+np-i`V`0`_`N#@JCop#pZ>DGDW]Vc)jCCOZ.U\c&8@MrEHq,NEM/d@U^B;u!Nh1'nh@!)F3%C&e>RWpckf9X!F=3u<6V'ju\o&j=J<4P6GM)WaFO`n5X=!(0tR;?PQQA!Mk1;/XkkprMp&!_f1`3*$YPYN5NOXX[dC%=K\_:cG\n%qbk/tD-?ngV0m8[L%/Nm2u#kNEEpZ,54ZpBn<A/H+.XYeG6?\`0'/"L_N"Rn^=<%Ba*&n=f)$sf\<JW\<PV2n)V5:Z3]PA`)OtcI%h`/=ZL%kG'V35V1hhE':?GH!XU4l>1aL7)Af.T9:'N8N7Y'^*k<#N6sn%IV5MVdZc*Yh<>`.u"W04BXSXaWk!L)Tbl^J'kSo"BM:%R3@.&eO]H2AZ4Z._nCM(ad!Rcp%6F`p\L^>XoJCCpYG/%I]MA<D?,O(f.VP<nJS@Ehs2)j:$H"BJ&f6Oko"+?hgu>J-YrNT@e!=2%l5Sto^N;n7V`\J!f.[)'^EL?WQ$BK>\uV<^"[2LkIW8LhriLVoho@[1ReQ1CqPEpQ]0D$srR)3U!ZBf=h<UD63#beYqQ>2DiX]#L%XaZDe);]eF?[iu!n5_cAVtBEJ'QL<`\hM;rFOtm.ontu2nOs5^P"*4<00S8T>`nm^Hi6;(>CF!WomQ#gSbMuW,>d7<2X7u)WP!D3%PWXtQrR+JsLU`C`KWfWRn)GA#mNMR1^Yu4RipZP559`kJ[N4dB^N<,?CYhRrf.[)'^[Y:"%Ed#<'uk<u?i#%h1lL;*p\L`Dl8QS.%Hp]/nUts'Mo#Gjb>Q)Q^+5]=j3lBPgqX=(rjsn*$KGj/`^V408d&hb'`R'G8qK_-:H`Q%NWmZV\EtW2'aF!m6badu`i9u`g?GCL0%]ahd.03d8uW;$.6]k"bprI+G:%@;,NF0FKuMrD?RrBg6'#>^V>Y'EXOeM$#7B1(M@QQX>%):5;#hKc;3HD4>F9^/,BqB_EI)1sW/%^#j$S2B,_XI';FHIcYqFoa;)/^0CP*aW:lIl^(?Y\Vri26215P)i!3@ie[@*V&.)H)L8]:rR,WWMm:=ZFg#/@&]?TO3:?I_C;Z!R%Y?uN%UUU)r<n@h$Y@"k](f82>q-LgXjWH*#4K9t+WJ=b(A]h(jqD1;Zhj)Wfh5:nOrBP%_:,*F83Bcmr>dbK3A&dMJq"3]9M!\iI%K-;l\bhe$r<$i_\TU]Do4.8Hg'k%c^=*&9n9;S&iU;#qgb=9,":.OW9-g#o$N_2rujU_4`SlmtRL$lj%WVtD8fkNS9r7]]nf?&m:%hV:N0IU&>Sr,+)^T:A\W$VrE']/.]ef;2`g3naIQ@mAf<r`XgJZ2_&W4E93Ul`EBa-gL$Cc]a-Za4BKeC%(HUAohk`k,,F<p\WD:%IIMWonF>]-_UnHeVf4CQe*6)F'9hfq]2VV(+$Rtuh7YmSE#84[=8trYmiq3:?E0RAg@F4@r3sqa$#S^q[IE_3=BFe1g8\'NEaDg*%VqV$jk/%$aVt7F,e9QCCSa"ENmbd$@-UafmlCZeIMR.ed>;AKUDbBE@^?K`hI@`d.4D;_A,dB"%?b4tY<PR,.]ChH[b+4"c,i9h+%Zgm3<*a()F3-dKS#!9B%raP7jSF>nt`3#;+qY$[D4o_3pEB*?5Ci'jr:GtG`r&EA91#*:deq-sC$JTZ.>I&H;r!'H/W-9WTgIi3N%a)=5b=MT1jWo]lek,1h5I=;l6U"Ci`'-c;Ei@iI-5!_<4feYW2S@3%Zc8Y`mXd=A*eHOR7/T'"EX`]0]I9ur!qIRFSAc:7gE6XZU%\iY=f?hsD@C5Z,mD-S^CR'#UPATdTl(B68(:gGWbeRuA"\(04,j\NERjfqZ\EH>H$G>E]nV0)77UtokC0.Ng<T-`"We!L`PKPuL[%>\QFeCT!@bl;l($W>T`2P`fb)dBA)*oeu`Z]Kj6[=.>6M!+;AoR=QEKMtAZNqU;>aop`Lm*TcJYoj@#,G:,F*n"&B)(R:=/hLkX^%K1b+RH[qO%JOcX'^%\HBI.1q5VtWF_4BS'/IZP*6k@g^Wk3cctK.Tp[>_/A_IP9Q'O-TkGCq_MP#V-4H@.#OIYk5#7=h>UOWc?q*%h[<cJ7gn,5p/T)8F;uk9oZK'&b:MK\F&_3iG?+nE3E#(In`nr]!W=LZ^&*,PP+/210'`nA]osfaSpjh<VqRZKm%NN6;3%Bp9fn6`%3[rPoh7<"?+-j1s+A'^r9_L.bhJ:'qKPjGF:35I[<XElKQDV6c(/@);XOU6Z^MJD3T4MAG6_!t!1*J(Ank(Ds[s,IGSb)Fp5+u\3%Dtd$?$0R6GenN[:'sn:nREi5*f56cjTR(fid_C<qX0#;p5i8`Y'AI<1\].@9%RePWW1%";/Hc3,a.I>Q!,LFW"S<!#e+a(GqXf'H%e9tUI.8YG.*$3$*JB7]"JegR8ZYKUdHB(e&VEp5j-E^X9NR%M'4"h@h%qaePlRk@Q/_&&u[Le_U,,<gjBBbjZ\e,U)[HEtP)j;WR%oo.`:aCMOp_#%)INAeaWd-PBc-I_+NrJ?6kcdV!Vf\d$+L20($h@G",0$ZSDOH8SA]^PPJk.@tX:&,`%C)c<F=s<\t$\%d5RZMot%gEjhOh-"65Y\KeI<IR&qn%j0ph%3:=Qfi=/p;fn\[/i?!'8F)D3pXT\r]5k*Wl5huCpY<KWA@,u0mS2]W=nKO%?#AU\]u-5+<SgN%n6T4K9ifE#nChjm)kVha^U\tWl9O&W*u5r6OY.D!dqe:Od7)@7XF$rDqO1fUPH/Jg_JiUkcNan1TO6'2FUj>X(D"_AV)`7U,$eGY%*1"8j*bRhgg2+%",)K@4rj\bRpirXP-<:p[n?Q%e0JKNQ5`RSk>PCT7"P7GCScf#(l1s\bI)+Vjd!d!h/g,<brNAY_/tBibQf6*_%)%l,p01W+9cSsni&lqj.m_*kS*@%s0S'`l:#^Jr;ni#GG:(p+kl@ZI3jt>j5Ap6kkVffQm1a;.T8Aa$!gl?$ICjdg/r]VVY"cXJN%+G]@`]9hW5GC6=X_P_/C`'_Ca&.*8V#9FL%hnW>"T\uiFhtf9?#>e7mHN0O4!-4%\'1;oP6DPi7IQE"2[E>+b0HH<o8msN9"r1Lq%OBXIW$07*8TXoR@,Z(/IWTeL9d)[N*2_HH2V&CSPZZ19P,@U:hqY3+&%d%@*==eigpu)l!d9)\ejq>;IciKacb`C2+J$>6[%q8no%3'r!2E.g5&Kt-\Z>nf*!Ffph;N7+YG:kI-dI70oDV+RaYNU(%nDCFr@kO$4g8`^<JlXFrBZacCL7Fp9s>`*VG^(3$D15Zrm6XN'H%SJ</%ed`n]lWY?oW"tZ.%L?R4]21;V16+/<)eMs2?!(#hHZ^\pG:K;[9(RKnr0Yc<j@_aE4.edHEWt$A!k4s<1T[Sjh;@1*XAg0Z%F%Xj9ok>su(Wu76)POE6Atb>D#;'g'KX%V[U(,05IKr&rBu=e$bT)eT1TO!rZ<.8BNfRja/XBg$:^$T_i0CCm#Jfhpqs/9-n0d9C%@JK"-$3"=$C+0#ONs't%,V^#4q+$$$\O%S>o8a$(ON'WGT78-]P:K&<5M:WQr;"(eYj;7JB[;3X#)%1E_&\I^rr_5N88q(0Fp5cF%i;Nu:HLb#qTX&Sub9;GjFd]aV?BW+GX(VPc"i"AQgr#LZ9"in%\Z!&jFB>q`Ya4nl?:TQ5EGLU.*7Kl1=86dg/ddnJTD0`mVaCCP%+h5:*T=.CR(VM#*A3DOt09B_kVa&`rk6c2Ve,%eOrf2rTL`cEM<-W/Yp7-ouD]i+ti:GKa"ZbN^VCZ8f,4Shr%eFJ4<;l`oXh[$1%MAKf#KD`%Fa5Zk#nA`,M^,Zs;IS?U:Iog^"D(BnPE1EZb.!iULr75V+%Q]Zc*aeJr\W=:!H!=9E?gc\A::'bmq<qXtIJ<HjI-KaZ%o;2"LAUE/dX3J9MI5=Z+R4s-c><+>HPJdcgSojVr&T7p/W;^ltT=1VW<uTV]b2m@\7?QBJ3IPZHO+iU8Ko(N6Vb[tIqd809`J6s.%o]'S(@c;2"A7BQIU,oQTltJjKM$G:%L8-i]=6o\JVkkL.[XG;/pC$rI_UXq+o&B!7kOfk)]BX3\3\T(=?]DBqkPD5G?g4@"(#$J&%,J[SDnYD'Z2#j]W#&@@hpjFm%GkSfTP<ZgLQsFH#iqbk!O,jrIAc30@rSdXlggb,B@d3"<H=Gj9kb;9eM"46G\*f@LmSVU1:isB*%rHulF4L9&WG]Vp)L=F5+&0Y@f;XiA*(ZjG@V2l="p&S?^>Ot7ZQr/L=_%uE%!@gM`gT@4E@N`f2$imFKZT]<VpTq3Lo"jmEJ3O)b%F`e]onK2I$CV-Y<;8!fknEoW?\pU`_p^\S=8)fEaaIDK'e/1Y@likGdX=sB_"U(Cu,B*"9KG<-&:bZ^tTMN2G4o"\L,AEuj20uFh%i39M;9bmoM+)W`W[MBpt1TMM`(9%lSE7'AHNtj3R=5h1_rd)E:!l)A^H2m$(MfVcVD:;7s-l)EM)"dBl-q5AKs4I65pTsEueIOQA%cBJtb8_R?1B]IC4;U%ED^-"$eop72A^W08!^m1fJbE_Y_LQ=YL&,+:aq+LPFS@D/F\=*ZY+gfYQ`M9>OFcX1a"S_Y6GL>0L#$=gC%B7M"d,[A:6J^*`")O"fE5p=BH.+jPeb1cWjDkY7d,l&NF/IuL(^cSd0P3nSlYWX^(o"N0<+O"Fp\p[%.G)3fG26f-Mp*GI\Vh\08%\LbmDA5u36Ob8n[aJtE9\O"AYA5u3-6bfp#4-'#KA"t\G;'%tNiHrB$8\oN9]BL=e*5rmK/-Sfrm[Tj3ai$Sc[d/'T)!M%.Qnc?Y%1q(QQM$FEZcDRL%hp:RPRBWP8$6.GoftlL"8-_,s7Oc]<>//]hrGt!8I&N1Tj!m3pT&N>_@2fM`Q0;/`cMgAeAZ,0Fn?UuATNIfo%`"KA'ERc8Y52guOfoQ$.7/]\<EQFV36'7h%.tg7G6rXJ4IlsSI53*a*Vt)'bmu%jXY9"%b#>m_k0n9>ZrOK*t,XaiOrT(U`,cp;>%Thfq5O=2eT4pl6e:P"S-Cg:5fDcS51@;Yi)73Z0S&3fpr`Y_UEo>LFh8h\*X:GNrl/Ka]ae"9lR@Hd;)/>&;dS=ZOKST*@GeA^n=%lqh![F[.nGNH0UqDY<;XLie(Ok.$;3KFsNdajg807(>"[$bCt"fO`"^m#A<0e)aKeOWm57#']Tc>oDa'&gKCm&$r$M2b&YddQ=+h%A82ouDgo&R<!j!gRkE,X`naH-G8D#Nb^jq%BbmW3d\,E0I+n<Vd'$WQ'C=Yhbp;C@EJIj)=>O*Z12oi&lJf4G$q+Zqb$1=k<iL`>%jQ>$J0.j:TN"H!qZin9]::.,&<rI1FA&%jbfPYnR?=K5mT"lm-7$#@9&;+*m,LP0+04W,%Z$1'1k3I%'OV+CoBGXn%l_T`0Z*dP4%,`TJnQ!qki<O9t:crbB*\).RgEW#4))VE>c7aBl0h6ajPRRU?HQ<&kfEVuA-M6^ndND,a8VE1bp>cQQN@Q<('X"HNfGRqgUGNf4u%]m*l3%:IEOLV\IUZ,\B44-q-Wbk(ddB4r&njM02Inl:@H(!&YXA1r"8;.cG<>[1^S>,<WSXHu%>13a3-HK`@1+.*G6P^2fqS`!'>%88LHrT\\K3ScsWeD0kZ8Je)0<r`Mb0`PZrNIPAfbo5rPFjOb"+\:QF(UA=[Tne7*B'm?a2a,m1m<VAJ_erK:PUL;ug^D7Be8&?ta%>$R@7+(jC$@1nY<d_o!S*'gTB,MJ/G[s(??e1KO4nnEu53d;T=6%jWO$m_8p!OQN]C[3&kP_reqQeq7%X8$JEI!GC,\%8n/E>%;d%<l-`;OcP65BQIDN:L7uug)p.36hbi4]AeTmc/.E$F7\-fk?%K?D>LO2p&5L5H+p4@p!V[:?6J_-].V4kM\/(%=L5\NU[odO$?9$2%nShftA:G);hgRqJlWf]pa`AqhBG6Arlh#,!qSAElV/9IEl%@'IitqGr"N;H>kBT_5ck4Y5SaN1uW//p9o3+LLY0^=EkiaRQ<krUN%kc#Xt/SWb3Ws)rhO.2GkEer>O_X#'#mZFu_"7&CiRG`L`_q\:s#3\TWlH4-Q$GW>8<fBFQBr,S3qu%7((jU+XR?6G[^jl@Z*H7[D%gH"Xb[5M3P0D4PF+$+aBp7Uf2@XXa3$\=8][>42M?-NECic2k1mH$NVe;u0p!-6NS]tIkWo4Fcnlg\PqnTV=';tKpZ!rq4TgWcdf%PLiJAIPDGGH^gM$[X!!J^\a0Egm#sP?M3ikpXjq/FT0Q=,NrTTpN4$9?d<`I)ef+'57=epDP/jLR`"`V)joSY:<Aj]s,2BCNrtc"%;UeE0;(S0PlsY2>bJAWZ^X6fO4lrenAIdYuc7*4_nD<'lb@gUjDZK_dDrgZ`=5T8?4a)+@dnHP#.^kYp*Oi!3Y+C+IQr\<7"^u"?%;[bOu$S\XF>)j(H];QW/_jmH0fa*3HFPA(.$iQKfSa'*79/!l2TniKN<#ENL@9)(1$"Oc.26XVadBXdP+BhXiDu`slc3-gak#t4(%j>V'TRYY`E(QKQ*S.#AD1kT1D($g`jB.29%\(G)<J/$8UG[)s>;^pFh*gg:b#'mhkT/fWrMl(:Bri?-sW`_.nb6a0&W^TifD)#gq%@1(4T[mRK&*9^1<`2lt-NFESre$27<.9=i8/PF=Aj`Xg)KDc@f(,0E73=a@rg0\6GE*UY16<im&O1/@F_m"+uJK=KN)s@dZ@Td`p%)6'WAZu$dL:9PCb5!l7Z/KO%[[uI-IRRF'b>I5-4^MZ,%9ll0jFL-dmD?DK$)FFL?RLO0r$K/t%\`at(An][([Xc`+3CV\%_k"WF%>fEO*JY3:l)IUn-B$c7RRtf0=,\C87hTSf7QH^eJ@Si_EJ-"La`k+/ib:G-#X,A9+Q:]>#f3j\FBs9\7LkWbUUOrE;;%;G5)i7_C%XqcRL`[B'bar@STMT'C-;q>6).Ej,i3?&=tCb_L.S8lko!b*$,A]NnEL2(sSf%"_`p^5rML/k`F3G1]FU+m)0cCoD(FpotX+4-Zr%_q`4KoCUh4!Z_E@B)irdL?3?_/"0Ul%DpX"]>OS*i*?KhKp[bMDf9g$IbZ)5hfA=,cr_r)0PBAKa"j#SJLE(onR9$qQj"`*qYYO@%X;02+m@=K)eY7Y#)]V;`6DM%Za)UJ8-j%tWkq=e!&jNH[1l?ee7re3riYZ9@'FAQooS93?q'u$0,<qh(d6Y6E4Hb@`&%83oA0@7O%PL+@j`Q/.R(/;hlI)m1aUV^Un!SD8ijqo3CFA6S[D?OB"+r&3s/K`P.\'&#>2h-^sXl.tDUZeYV.9:33e:DiafC2&;6'1'sWqWB@%[JG6FNUVJ2AQiaU#n%2ogW5!!mngf'1&XO1&`a`H`@"S+L*Wb_Ti!):("8eih4PF'`UpY53<57VD@t)i$0H)Z!uaJUI0aYu!SuM1%&_^D!7O4W^b;h[B&&oiUW:s]uF,OinLhRDO80B$sD3gYFRVne8P-EaJ9W/7b07q9lj'cWP==dbe+A<^l"jA&];q*qh*4.W("LVnl%J/on.=!n8E0*d<r:5C46$FJ5te9Jg$1dDZ`_rH:JY2jt4?s^o.0V;mC==;`;L1pk]dE8Fr\c?7)[.CF&gAkETW%&!]e^-U:X.\3Q%#KB0n5Y<X_%hH)fJ:XPi$'H&P,7s3F#SqY"e=GWe[LWJiU0=otbFaRp9%ML^^h!>O\,mp@Mpc$4$rB;DoEtIjH4?[H!?0/bAYl*k%;f!9_G0i(.?i`EVKl6u[0jpA16CEf[)>/[VLo(0YRp\o%`7?c"!3YQL%2BksV\`?=^hhXflJ8^MSq,fKglpb"F!AQQ%=Si;^-Zl@%CDsd^<k;bm"<kHLn!UW#&6$ddL^.`ZlH?G+I*Z=)0TZfN`"f4`;obJ[6;<i]G`NPsT`YgUE6G#1W1&MYi%D5>@HK%q4PdrI$s)<U%*l(H<A!gi&F9a>E0J/J2\ct6U&;tlj4M7UH)2!):BZ^Bl9iG?5\qUc\U+2>>b17:o/5Sn4*l)/M-GaMffEEGX4]#o&d2Z*Wj8og1%4:</`J:Rk)+r'O@C1+=+X@OAb]OK-_4U.BSm":2l#3c^6-J1&_Iph<+[`K)B?$X@/k[/sgEcb7>dm-r((g*O;[8JTC>FE.!2CiZu%\;nQ*B>JK5RM?qPU(.mn)NSN]kDB8q,QO4c\gFoB<#nH+_8HVs.A@PZn@\.kWRsCfLJr29JQ<o.D2injJ]%hgUJAT2\<^_4nq::)%#\Kk#L(Hl#MRXS^'BfQ[<V\MF";E:U$*Hb)81\TiQ'nYgguk[i;\V9^b^;gh#\!f7>caud6%/&Ki!W[n&>I9GH:R<414`$L!j[>W%/l4L/"fN+U8;+2Y6H+Z>MXS@k.CROG!9OHm''ls8-_,a&$AbH4E<;)8!ec,`d..2CCkq=3"FMbTBZS2enSE:cGr7Kn<FT-.,Re[\%X^K#WWepD2oL#"B-n;W&(^g<u>qOq]!`:Qo2`NF!h#QG4<H`NdAs:0<KKK?mD.7,`_''D"=fQ.f;NNmH/9IBX!d[bD(&/"B0sq;&%Z$#T&!'.\(1n(*o`$N;%<!>fdh1sdJmn)e"e-^jU6QG#W?aKgKEc`aJ^m#Qf%>>1uZ465l3<gYJ:'?^G&&T9p>6%S1*fZ*h>+:B8%d>(B3Y_EE]GVu?e#Y'naEW7@>;P##0LCmu73!W0f0EeZ66I9PbUUXhLnVJ$5MF,ZWJqdsDbn-m39\6\(W']spZ)n#SI>G?g5nG`W%6&iYaj#$qf1.8TCoAG!:q4=b!Ji7S=#Q_r,QuO"Zj9#BaYZRFuR[[]NW=&OCE#<^I:ja?;,mg()M]/J8Z'=DkD[nZ^dA=<S)-IH0%BPJAr@9U#Xj<K<p/=)CEJC>?iSY@m6W!l"7eBOpk</oa%43dD>Oinl"fGu*#L3S:$L_V`Uh,uJH75&(ca"kSlB[8Q@?@\CI.O'BC%=ie'SidrBZZGRG`e$aeje-#sa#A#SSCf8V>8!HpH*_:4u0nLoAqbm&3+@u=**Q!YfnK(cU$FMS8R,Sq`m,F>3[c-\k*BBE<>-EYe%,$H/U*3BB1#-*;Tk<iV`Q?^`.iN,kqUTh3Y2J$u.K`D,\@oLVPjO&<f4P@S*,ADc[JHZq(kNFrm-sT=jSg!H<0Z.Sln/a*'<*Z<C%AeFl3\.fK3-E@/;%&XC.'X\U2%92i8*UoM5#lg4G&JFpgQC0g.9ju"N.E'.I2b]DY$J?N*<TJ3uh\`'Jm@t47_I*^#[1`1n+iOJh%EE-%JMBuUSAjVSOndZcn-HVdqotghG<FP8c*Sofok45<MKAh0;ctSAOZIC(J%O%i/b9VuIN%B%E(.7:Gh9["uYUK`dUR>"LWLCr@%7sYXgL24*2D!Jr+Ng-"_\n@J):;SkdOK.#$P(D-g&CCFoXhluR:@c_AA]jJpX9W/$^iR#X64KS=G(TdbY-*[W(GM@*pM?Le7N+51%JG9iZJJ$G:!c:co#lpo;hJY+//aAX4=bScZ`i(Z0:aEFSA@SEb0sjJ2_BfQ&i>Mcl=LKApT#*GgMF!:5@Gp0]j@;6n+KWiK)/,&H%MV0mmD^U86f+ju:<7M`=b(AHu5A6EE;N:i6YnLX3Y+QGkp9;$'V$@$3b=I6V?n<:ZRWV>L-`4o4[]ooF_M_@G>OYh\B^tS=Lb=jO%VT)ojT`Rka+,7cl!c4D.Ck!YI+\m/^s7'm-.9\_M0b5/"_AqSfO:WO>'fheTA(u!*W0-6'mBd:-#Wg(_]#as,Fp+NJ1m7t#VBa1h%$l"I^Q>SL)2:l4OYg?<<Lp34f7MrmQ).XS7lr5ikcd>Sj!Q8$X^;0G^)b]kb%]^%h)5bA=#i-ih%1pQkF^pN0DP1>aL^qq!X)hXJ%_['kfKbL[b7^-Ws4AEVk.UH%r6VO'Fc2quSe-*p]hf@)j8+]tuGk5."Ad_c#R&g;@j:R!8+=;6lMgg3@Q6SM@gLW5O"<om.M8`?X%R>)5\eZJ.tJ18>`&G@gOA?c<2=c2F4D+Fda97%:GQ$/8+P+*T&#XVXJ.c8\iL#jAs$\$F,<.Q@j=8m,Qjk)2LJPZo/<p2d\5gdLc%TP!60/PY3["TL_5P=HqR"X"Kr!INIb>=jr+[\F0)"Og5WWXbL'oG[,#MMGRD6O\)(KtD72R&X&O^gS52>%iZl_Q"?MhA#*9R]`(b%H<<($;Zo'*q^Ch)HT[%`;t-TE?df^P.d2[kr#/ES5qHG`W&>%[i-W8'r19VhZ;YRuAqV;DNV6a&%<N$(;XB#.[_qMV6;5Q6E^dCs%(7VI'M2%c5MUGLJr!^"\&7PsRkpd`g\11-9(U8NIE"s`G2)0.1=<XXMa>7Zb+@umUL7nk5D\++hZk!9*UQu%5U7,n.=dk`hpgk@"%/Gj[pl3K,!bXAXK-Mn5jL,j3BNoFaq;\dqqG@.@X=pli5`.?1&i!@)V"9gH=6T(Z#`DR,=*iXcTO4)Y/.N1?[5YnF9O<Kk%s1<1\%pb38MVWO%G!SYjH@tU-Yqdll=qTRr9_pB7d<b+Uh@qDg92oE)W4TWeWN?(Iab(<W(KG$"T$--E2&J-Do#/hVMeqh\-/UOre?;4i:%dM^-eVSY5Df[gauXFAOW,L[b/T1rfL:D?`"$UpGH_PJ%rT+liR:#9+^+d!M^>Rt&6.;Y>#6Fe:;;YZ2E>`0P@YQY"B8l`VNZs^i;%J7,41bIi]e5'#[;Q:/ZNL9Y+eBo&f:8*,/??.Gc_/5:Fj(VW\\n5hp2fYX4+mf3@)I$P7qWX>L_TPO%eh'=&'c3U"HlDb96:j<+1%_r<iDemR9qoriId<5jn(Z\.=+HoK3'8S8FnkthB$F3+2_B9$)-lkdaQgGA.2;]!h:RO[ft@u:/Z,B/='L*DICnukX%!C<"q)G(3<%0aJ=6@7hUR,0b4t2!KMj+g0kh,3EJF7p-G?1sL2t:);ELbs!1_DV*uEVZV:om]MY2WZpgq<=u""fOBJ#K_':oi/+t32a^DSQm>%W%E%PrPS2u2A\&^ras%,"hBrX4_(#TH>h%?6F^agI7\q6;L&\l^Q(e>TT)&sFm_'Y[J$CXIDNHPrJ!fBgL=+HEF4RN:5Ub`JP!E@hf%J10L2!<aug9no/L+S@AlMCb<,*$rKf(r[icO9\j>ZCJdb)G*B7'm`dcOu,o76U(QiOSGad;5&Qg71@/ppc;>:*W^"*G7G;If5(eh%lZ`W0dV+Ae.ZCH)LYf?4keSCSif57:U_D\,2&1jrKusrsdH,'.=Ac^7M&Bh]T;Z-J3if+[;-+/2b2nZ/83oT3E*sgI/E%[]2P<?.%q[!g>6R!d[di^\*F:l45FE++/c7:PL6e@\K!gd<`Yj$i'4]sDIf8@bB]*bZAAOb69,WID;A7WK[(,[e?O#dVJXG0W;N$2B._WQ02%`PEotaO_8_];(!P->Mm?Tg0#W?^G_e-QY=>kdn:s#$[3H*83D2apL7M6qr=GMkhafCc$%NVQo3/lrr-f`_89FNFm19%$"+F:&-!5%b&+r7Vq4TSBL<qo$3ap,NbU;e^bd`sBEjM.gnorWP=&5;_c.CNgb>6mL'uG9Wq3bQLaE.B3;S@r?P>+,AI(Sh16Hru#.=eF,Dk`&%_kZ??(CC$hS-,>#PGtLK'QKsZ@YtP,GV$mY)TGIl^;G3"l7c7<K6Gl_U';n[M,8`d67;%NS$I:]Aa..'kSYi)3us7;Sc]R,1]c3?%##[2RC_OlH?"O3C_`7E0flmFH:2T9aFp25/KiFtO*9%_,L+m)33)%U;AA`)Tn19]n)<!1uE/hM8Kd"#N(dmed0N`TWL[A5$XUXE,%K<8$G"KP4]%rCK488J;q7h'H;KOHc;3c0+(W1lsO#fR$'.&aJ)A?')t!Cd=:#SEapUi9id;\Lbs5X6%4nk;ct]bIi8Y]o#>QE)X1%.j2d,,83J0c4\S_fR'<o_^HWofI+Tk.qUR\6rAat*KC9]HTIeN+rOLMa@ESrD6We;&[NT;$:>prR4aC&N&`=\:^X3?;@tD#-]?H>%8<Ki=j%'?4(Hc7PY>h9M6uHSbOU.,;L%@]gC?gE7`*4!GLQLfKLScta+@ALP`FpF&7EWj(AJ>uf%TUYn`K5\r(:gQ8]OVW'5U<#(%_aq3gg(<h"9.eB86`ZbO0fk+6%iaciP`!?n#90h5]B^PpW0Tf(i#TmhYHI$fib`mVEE5NO0p/In5*AcO5Q@I7>E1\C;KO0m',+D'%&Wp"[1d]A3*2&_XfOCFsDSiqCloH%#-fn4fNM84^r,*,cMTH51b?RXpEEqW5WD*;pc$g<PeP]k2j)P^Z`IBSrZAt,&?O^F/PKpKG%6D8*;34?3@eZgZCKu[^0!#];BLCKJkUMH_d!0O;7iKFZMfd^2DPad::b+PQDZ?5NU<S75G@k9\0d>R)[,Gl4'&YDZ5kQC((h\!UM%K!cMo7PGu>1')u`M$P5nT$C[WC#is1UPkt2g:,^o7gOJ1B[Mo+0<K/AO4aW_U^8PAZe/((/-^X^C'X]:;\;JM&s8joU3FS%%&M\i%a]Tr$DkgOZo"hV#=%(b9F"R]ukl?QrN_b<^M9-ON\Jh%;\nj#C)n;'+."6_/Be/aVf.k1tN@6):^^O&"1#j^Hb6_U3-I.n@:n5YU%U*D)94Es%bBk+RrU/i1H1-UkrBS%@!fGq1?ac\EIPXn@g\SAuf"\$F.--@"``Mp;g;(V4%OUiHMd5LgYcI*uKMmt"EAf8I[67WL(%?F.S$-tV-U03NP2k\sX+Z'i*Q9;[dN#ug?G15#u[mmEp2*bN<*\klZ\?pU"YR`J!Ni@L?B8.]"eD@)%!$QIcVaA6gN/Y,;'/k?Od%i/#9o8i35e3gfgr'J*k6@S2pF.:J2^T7r#lD$j:&>A(Ko5Y@K'_SV]/9XnUXJ4FZ<U"qC*M?(X8.5DSO(0^&C^SGX]RSf6TYU1d-%K-;j7'O/5JZUneV-Y/MsIh64T8I#f/Up-+4isDtYnIgMRHsgACK#:FdC'&OBCe+npHk_(mQ=gP.,eM`3Ecokq3!2c&nKDSJkoh"h%&ciMqO4]6ofQ]X`P0QQK6_"CTE@R36L"S#GE&LZ0lI\&7"4:g*2/SbuF[e=Ek(>N!,;+ce[/M(?&=k>a##4%_Y_Pks<r<_FjJgoJ%L_YpE^iWgiT;//tBl^uQFHkXFN]P,e:rHJ9LcJ9_RRROO8MR<fCV$[TUVSC%QGR@31hj<s9g#u7fG>[u\>+'U:5#;Yfm0S.YuP\;%;p(S$<jP4+ZH_j:'F#D0I4_gHYRrBGFN5eKD)rm$:"-e3WJQHV#!6ji@RHlArFS1+0Gm-5?j%&m#JG2g#[oV0%:J!r@_9a.5_riA%HUe\!S0c$@!9<R.M4T_N+M&jAQH9[MH397=$.I.0Zl,0K%C!2?0e9n[Md9l55A*[K.3PWM9,C0"B]G:pJu(RZ)8YgVLfqW2PWt3A%LQ>bMFNRf15%Oo8G*]:NA;ncB=4Q!f-BX(cfG10CLW'fcT&;tO9>!aY?!^PJfq5,I4M&UsW,f\/[Ffela7PAt$_^R:P0^-8:CNQ+%_.Yq=2JlcV,nBu0n&+*h2qo%K1pU&&<G#lo<&>&%UH'N[mj/"mEKNq8VjoA8k+WE0FI'/.T,"")3=(89if)Ap;r,g>l+V#E]G0r:%3IIZBk8)Z.n@>#7!]>ip0Jb#G;WrkmZRgmL.3+,l`M!G.8>Dl]Yq2Lt7#XhVi=3(o1kcqm&k[m2N_+&XKq]A<7<?md+iq]??EbLp%%L7fDk9lc"NpE.2E4%8)ZXNK/[<[q$To8+jSc7&?U*@Lr)P-M7U,IrQP3"^d7<*-I5N^=mE]bM42(jZX;Zb+cTV.LinH+9W(pF/?%@)QCc8?d217.V-tilN>D*t$AZ9URU#W\W_s;C7hU;K$OV)!AgaNf<aHQ8]`IG8-$YhI)->';E>u\/V(^L<so`%n:P_K^"B3XZ.%"%pHmtD[ma8qMRikLFb=9?0SL_1.]8&"TSSct0]bmKF'J<Hh1e`8/g%me+bn,i@33Ij@MW8eH87q1g8'[DN8.gL';jEn`.]VS(!a?)%3`kDVJNM.ZB&a$j2D!.X'fia$%q-*P,A&Cq)__Yc_?"b%CN<U[D/gM];T/J[)ETi>)Q2'TRBoM,dVMV\J/"2[c"(R6reQ/\PJ\)1%>$l:2N6EKBda;5uDBYh_VAS%h7WoF+pR6gJn7:_@ndQ31!Riob&POG"\.KQQ_Hp+Lc6fE%#0CVB"71oO=YDsi#8oofBJ,E]!YA,L%V6h",;Mc4"U>Ro"Uf^MG\`,/BB>rs.LSaS6)eC=01a7;j;*!%R9.ds+NbSsTAQ%:j_`#(s,d8^F65N(#)FsH/cTJr%KGrSXi?&[6%L`K1mM*V&]L'rc40aZ*JV'b-QXGk4*jM$2=56=[H#6>O!0i3n;adnV?6,pOZ-QQS1F)dB1La-5!6uao=NANQi%@H0H[3D&!ihK$c%VULau7"?l+m(.\D9XV(&SN0hC-b@aQ[6Ucf1O25U+ZgTj%#5K-865XWXZ.%'"36YXNp`^Bn<l:M7<WU[<!(!hWl]3$<=C#ZX=&2@%'LUnK(tYDqgO'3#DA#TJbaRZ-?#f`/7lUru]ekcHEaB)f0H'U"3NWKSs!]ck`rTiWfE)VAPu&W[-s1PiF9$/=a.t,@iX41+R-L'u%A/bW$-D9<QkJQLoeA?5D$,U^6gGCn'?EpaPf0m#VkIpD-%/4JQ'>otk1XO4j3"++%7mc9EQ(/B%@g/2K!^2X8Ar@#"3>5ULVLQ^#%?=B'n-FMs>pC;X7THaG8GVaOEAn*qf!,DTDNter$9LnD>(C:,&%;IHp0pl>:EWMO5ncsIRZ_6im]%DYj`QT(?d]g+%ItHj,k\10$%6%5T(dYp=+VHmY2P=d_$$itXL&k'S&"qLb[j!h=8LK^CtYIME?4GXiXP4N*!AclJ%F7<QST!=AVd.X\_XYM`tcTslIJK9iV(1GY-%qG$ua1n"_>U11nC"Rn'0(mDd7J%lqZ4s0_9EYj@=6pHkIEgD^u_m*IW4]pDVJ19hb!@\m':N-Ci=GTO<6NDl-U8ir"8]_<+%(67G%:-Qn]%Wi'$g5\B**)H2Y+EoP]ogfC;0+2"-e7Vke3h'5j_GP@5DM&ZHSas8pZa\n,9G#-ZY[nZe;aoiQ"`e?:0Q8"j.0h.l!/?1R%i)AhfD(Uf$Bjh@>%XJ-1>'-2*5T;bGe'pWI5"(>6'D5a$V\[OmK6_QroV/CL.T'Hm)+["=Ye(P!U0TN34ntb.YthCcAib'dOML:1%0T9IT0&[gmOis^sMTPat@<jOqdFacLhno_r>)"_8EK,4?q&G'%>fd!^$PmE[eY5.@rE-2Jb#(K5//rZ3_l]#EO93+eI#&UMhif`n%=dTNTpOibYBL2OU8I2ulc,sh`c2@ULFY14gjLFjjnfR:s!.-GQLsUK_-`2Fq$5bF4fK5ji0!l)CgHDKQ[,Jd/cJ^Q0CKGY]P%%6#%78Y>lP[;'7],t[07jX+(4FanMfIJJL8B3IU'Nb2iB)Zg<n--?%j`I_-'8jJ68rf]#%rD8`,!Xg2iC$e?qD/7]DHqIfp_oq"npP`8%lB!hP#)[-a%q:\)l<8UAih!&&HgFZR&9XBL#p8#&Ht)V)M%-49k+.lMGW%MeUkXb[CGh)Sgq$]7,3dCF#h*1]Z=M!af!E02?9RS(%Z?G]T<mb-3I<7tR"0O*Cqf?PP9NW<l/^SDK^$P+#'>*=s(XAs.RI(XL)M7`j>`^0[3c&8>Mu-%ICiP$brW#[u'P5q@\d$g&?MEUt%^uHaF*deoCXR:&qc&oem:m=5HZhl>Yf]Npfh3l5,c=XX#53u[m&9%V>=at2J?efo=pF65>0[VE$"!lt0MXk`q*h_(<_Mi9H(`KbA%^>/%U(sYQ]+8^;;p`>j/+)R;aPOMiI+e;Tob(KG#^uGZYg@g<?Ch@aaF].1@Qm6&4e5Ue*8fgcab9aAL2&tYZ_I"4(Z!lL@"U4<;%0L[l?HKKTJOg$u.ApJO*-mSu%YRJAm>&Q^F5KlX;D80//k[q\:DW[B5;:21cU.@^poH^G%6<&sk;*!d5EpEAGc9d>eV3?h[Wca.3%n=O,rX\1)6i95]6s0s@k8e,mgnYtW@)6t.4QA[#E`S='&3.TDolcKV.=qh%1QXqTOKM,'7FpFXL,m9s8.jmV]>\QKZd5ffmGG?sU%bbnm;ca6gQ)q/PE8bd%CBec"8H\B;,AU8&i,*7_C$(ip!?d-?QWQ$rs=pLB]H$t/FPWiRsRR3<(@p9r9\5rHbdIj*`PtiI,NZ9jO%1QY#!ftT9u]Xst^^1Yr\%U9Z[3M0>M7so)YFqlqNAY!N]"VN?-Z*]Z6o9JCdD+Q\pZ',"u@O7"J@1<"=M%'$O-+2c(P#l%kGaseD%>RXDeqMSIIc.In1Djl89K0Kta6f48LY@agFI6310<=EZ`;SOfIq=e3`O<T.ka":_*mSJP!E=r-eo(W6hpm+1og^VJL771&Uc77E\%mH>0gB2GAXo<^48CLs;V^gMc*SCTr<P@)-ll7?Q8$_KV*=4^-<1j-dQ]$fe["05*8Y^Pd@&l[De1j'gK%D0_(Y4*1=JH6(=n;/)k%i"NSn*ZU6)$FTKT0gbLGc=RB^Z:MF:!\<8l"N$NPaBccD_C)60Bbo-\he@0omcbio"Og$;?FTnRM:pu-DpjqJT>sLg,0f7P.5.Hh%/#Dc:J!=cS-;9B9L:_]u/nXf7hRdMVRi7'AU#9!iKQ9SZ,ruP2Qj1S&=r-+5\48#ppta[*fAj;tp@4i1XkT4R"WN[<4pPV3(MDC/%H#O9`;0]%G>#ODBj1N%XVN)rspTr=Xk(RP*kmu)&8RIa'F\e_emb`L:;CN+K2gVom"!/pkl@<7",@N:$l<<HR;f)$i)She$$_P'R%=EKBo`d&F'-f!-8,B%_XC!R%gTY90"JJhPXJaofFa'QRsil)",QRLM'P\2TF8-CP!Y]V3"Xtta0#9a8`\,4FD,Q`acE?&@@<q1%J%<lYQg'#7,5O""744ZPSI#=8KP,mbEC8q9#AJYhD*Eoc%gkE?#_JHQNle8d&Y9upkiQ&m8DTBOZhC,Kf#<E<ig#Ue'6,rYFC$%tRr%h5[[t&dgIu,#L>=.OI.WJ"G4pMH7fT64A6<$:MM<h]*;Lbt?AC2WY8I4Ye5e2j(a`"Ii[d#=2?_GX*ZEj+4'oT,!%#Fm'Pg9q9'.%6U-pe>3$.`r>&LE+g@rQ>*VfbL44YRPFA#%W8m1n1Ugg>W0o(pUA`ndNocB/%#SKZIe7liP3%::ZKRk!OHP4gA;YDY]44F32V,Nl%6P,T?pu70.qgKT*Ecd06o_q&pb$o@HP?f/.LsXQB+MKN4<B'uf&`TO2DM.JI.bn'O7RAATAW[+mAcG$.Wf1+O`B7_I!V'C!en;@p%O0*Hep%%bi$(PHU05"5[K@kH`Gs[q]"$$E_.M4F/&'.n]?K'[O3^..[QPqf5X[i<$h<Iq+1Ot0L%sis@"@n#hOW[F*Amg8)PD@9H%aTI5m=Qg=Q0<P@p#EP7-\fj_1[HFE?A]pXqOICg7[W9+?>rs>1h"cFI`ZR!`pL=*UJaur"0DH?/;2Y.phFaE9M!7!]KV?9BfE3c?%)5/2[$"[OISs"Y!Q'kL12/#*3Ei5sp+i4GsMuW)_4YS!0:(-(23seb"`,DMT<sNG9C)WZ$h'jJL5m])"luU%^(C,!_Pu8oEe1e,\%OS(I5K4!t5.1Q(&,l&VqSWJn:_R^Kg#YO$,'a/`1'CJFZ19ZEY?Eo,;?LY9oeY+6ga';qI;%b,nL^nTk.],VK&7ku:]_o$K'A^Vs%oJ5=p8KG^i`+osq\d&CJCr\=*TS*@a#61@8JfD]<&]UP]^-F6"PL]2:(^GfB!f^sF8=ubDX%HNGa"*d2g-Jtr(%?,4&=42.WDX$A%p'*[C]_,C*EMTbc2%F=u:`0cb]h=!8%n'K)kTe4/'pG=oF<N]@4$+4qd8"'F>RAX!1uL[?@k"1M2ObR0YpM5d87-=E.O==Sqf`HA%T%f!sFLkc?$oi9'_eL$CFWlDk=hZGs8'a8S<`Sfn.MCe,(^#;m-SiJ6f+4pldq-cH_F(ee`t&C$S=)ouK0,Slal,;\\4LBX/qI_.%cH(F5;AZoK<>PkqTFER&+*<+#c4]Il,'JgPN_pWYi8ssu`]t+].UcW6_X$-.`e8mEgNr-:dW$N4N\El2.%AWjkmO%?Lu0U/![d[<%(+5ec8,sNJ6/GA:)8p)O"2Q?=<*md5IF',cp&,HR0rNg]1/J?))@rrm7,W_a>XSPr%<IGuEk?s4Q>FY@D6,2M#W`oF72r@*A#h7;%7GDL=pOV>@S7$ce\"Q\)/Lo6`cpL"GAM@U>=cLN`>ibZ`i=aa1Z,jlfJcPj*R6_og.e;N-Z%?\)K`E`+m=khD4X2,6^lZE"&bm>8%dR0;#:oP09Pua9_iZjJOhW9KoC0j(JoFCdOO>PsSM&F\eAVktA4M'%--^Xrji3'bh;43S9UDB0N1dA/Y?B-n%*fUK8@3%uV6c.?1%79Ii#=H8lLHSdSd47(VRO$?hmY;ASFi2(aUG&0M#Ncco+YmF>j(;rX/X,ZBa,XW>pc;)R,>PU4Y.JkRub%=`r+gX$i!m?N+ArI09%A1\\K'fP<QFgd8c>-@h''b4?Wk=Aif+O6BbaTeb9e=!]-'RQb@qHV^&Wj))1<MPILP(A:#(>+lD]UCW3`5ml9_E+2dYNK+J&*Kp[%YPu^jac>]<T``,^6i*`J,%I5XSLO.)_17BS[bC-];`l`Q1>(f-V6O,K8k@]mXipDIDfn[rGp;<?N0n$MgBG`?O4_rB_N2Vi"Ob/h%&5?P:*4$l`>>@,)=/4dI@CA6n.%mcV6J^""p6jdp`p>j(#JVfh1aC,,>/SY&3fqqQ4pRhEnd<,!+YMsXr<He+2IjX,1=:k(F+mOE%@Hb?U\d%mMVN*+dfejP]RV*a^@8=q>LfUTsN;^[D"etrYDLnMZ8V*d<$-=Nu[CUSF#e[^j<4$\cNR5l#=elC0_1h<ur8!*9?eINY%)r.:u)+qVS-:WAmL&7(q?DCN">$T,t3Kh-]0mNF0FlAR4HUr2N9uOT"<lTD]HMKaa<,"%FH;ZsL!QD%>1&psIq,GoV$?`.s)??bc%_F*!W)%#h#=i.P3>S,?4<jQ7hktDjdq2rmoUsT:m7GSO5a0WN4r5S"j-#89j`19ePDDZ/O0LC?#G&T#"[gAh?%U,75^6M#9b!K"B%X_Cm^;SfK?"CY3YXYn6!Frd(a=2G8B/Y"6R.&[&L$bo@=k_4Wb7bhG2r'I4cGhK.I@%]aLA:/,.7nc4C,+NlLW4,'*=-<?P^m;V]%+E]@G1MW3U#GR.U8A=YtPpFOa05VhW&X0bu*X9h]8&SK34BX21O*1,ad1MTS"Lg,l5-T#tc9<X2!eYF`+;:X1`^\Ze9NVqJoI0?]%C"bU9^_.uA4Qjccge!:>_?SSe:d\["i060_`6ZX@Eh@nF(lc^<iFoXpk,So`[)Sh9^CNN+<@#3M6+8p'"bPZ7HPp_qPEEIecbYGt%0k@*=A:ZY-pet;HoTZhSR&(!!oMUB(KD-%K`DV1.'dhJ/<a$m^eEO(G+Je!6*0(Ra#dM;f*KE[j^l8X.%,r9S<Z0"h^?l.>atBdA%O!bi8Q-(J*j<8a6@ci$Bd]/,d/%CL01JADV3+e[M/""iRP\2g&icAI.Mqgaobj/eh>B`m"72U^K?2+Xs\.(XtKRnif?SP!PKYZhZ%,qD'b.e$eNR?AfKh>J,AT&ojJ[c#O_>ma,4Ykm3dGo;/X(d;f2.$4Z)[\Zb4mA&XgYhUQ9G#_eBJ\87F&.]c12u/1H?'q#1:?&G<%Pq8hfaC_5iH\]\hbY6h[<lY%6X$i-X"$m@VV!6s:\/drJEuU'jmX4#2#.Ed56EaI*L\6(I%qrE?OFbR+gq"0-,[5sGV0F-*\VU4n%H2N3E#Ro<TQ[GS@(lf8,`dfaE(52D'q[&,,GAL:dAUVlA/p:XG3V@*i^,Z^Yglp4rK@Hoc@uF\([J1l*\T!<98<TEM?)rS_-3(h!%V-!mSZ;J(D[H\akSS'_K8&@qBmhnL@=VJo55M\Du8\b+#a#Mqs'ooaaV3Gnmj@B]0@qboElgf,tV``t/YW=8H7VGP$#n6R>KSM0+%eBiT79jYrr<i2hA$JuJ4'P>W*/$L-kD8?hqJ`-X+.aK%gRp:\gM8*9PnkfO-B*8U,P$9Lec'g%@UA`ndJYfUW9OCU.(EI*T@huCq%55\EUH*R\tGX!f\[A*G@=G+Z,lP"3?o>0FDQ]."Z/XVgIkB77>6`b]M-,`;3Y`NV:FD1o$>9LaL/1oFDTSA<"<EXe?Wp,j$jAojN%Eg@uH>4d-X=O\1iS<Bn@e=Rr[*mJe&$7W4,V=)B:L8dcLOC@,tB*>2D0O.iDD&IS(:C&H@*98u]U6"RC,oSX]#<"OD%*?.#Q?`p.%+5[rn5,;Uh8?>0Eod</J43Nm"N\[!l_PM5"*2u0S*3XFD*feZ+/0ZWtK^"4D70d!j4g7rf[!h3?mi;"_B5f;?dKr5E`;DJ@liNIn%)5CcTJ/S'WqC^#B.r4h1aDiB=$@KrH#WBROOE.XDA@$ePFf=LFe<!n_bDHdtnMtBn$URa"(q`J*ElO<MX3,dX%Adl)'#mor(QEu'%WD`s*it>d6jY==mjcNA.i2U$[4tTs+LXQPiTY90"%N/46$.<'j"D-#4a(#RZ]6"mI[0HcRhdgT/BS;.))5-#C!n#lC+":;)6"%_.%5eSE11\PgmG'KF<6niR[^.*!?V:'[aj@BQmYp>%=THnL41_-Kr5hd5\cUeP&4QpHj;3kl1"(+o#nd0:rr'^Q*0<^Pt&6NaL$.J8_%*m[^0A<G@&q.-$YkY7>(S7olShI`YG81[QWde4<@)@k\V"ejak!2&8u#f?[l91J]eiNS1:\`iHP]:gj*(bs\QJL)'5e(l'2W,`S.%MZ?&+]M(q@_qkF\m7)"OpWhX@9Z[mU)ZiZ"&X^8E[SX+.9#L!"n2]iSUiliFY'RHR]:n5(bCZWXc#.cs%[\LN5#h&d\@)kuUm!K-%r5Bf9P'"]S=D9cf19DW,11iDle8!&4;PjX3i5,dOKTe+?r?*`OBJosFKp\cG[%`@gC?6Os>JAqk<=C<($,/s-50.'Ua-Qlq"YO%Y%_[jrc@!1&-[tXrU%)Xe&ro5V,iM9KfZ,/Y$El@ef^U%BB9#^u[qBb&1p&5AFgk%%p'jkI8?G8'Ta=!0MT0?L'\2mGq[%U_3_q!tj%3M6(C"T3%pmV%<0nu+aBOsB5'*Q+9O:[&'0F'0bK]43(qnlEc?'Dh^ggj=FirGL&QJYi/ZQte_X5iqZ_T4t5j@<n.s+78mFe4T>c%'.$.r4pI==ARMMsd::_9BW3m/T>h]mX%dh-k>d]!Ce-K:oa8A=%sDm_8T+g!=9qU.>sn20kVG%>4gUtLktUqkb;sreKecorR41-/%Wkkqs'S37?7#r`kk%YQG/hrAlD)PF=jQNPrCj^sHG(HX;f@b[gno)#1p(.2up)j<`qu"dL:]L(=p7Hj1jhF!/q7j,jrq*,CVbd?`%jl`iIqX)K+]RTm'qt[]SIsc\Ao#i]$rr2$RYCGGZH2IElfAD&Wp"S*-hu<N)rro]X@a.,cqTIcF])=jT;(G`~>%AI9_PrivateDataEnd